<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从零开始为 PicGo 开发一个新图床</title>
      <link href="/archives/picgo-plugin-uploader-development.html"/>
      <url>/archives/picgo-plugin-uploader-development.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Mar 26 2019 17:59:28 GMT+0800 (China Standard Time) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用过几款上传图片到图床的软件，但是自己常用的图床，比如<a href="https://www.qingcloud.com/products/qingstor/" target="_blank" rel="noopener">青云对象存储</a>基本都没有支持的。</p><p>刚好前几天发现了一款可以自定义插件的图片上传软件 <a href="https://molunerfinn.com/PicGo/" target="_blank" rel="noopener">PicGo</a>，借此机会正好为其新增<a href="https://www.qingcloud.com/products/qingstor/" target="_blank" rel="noopener">青云对象存储</a>图床的支持。</p><p><img src="https://upload-images.jianshu.io/upload_images/16416523-2578cdfbd0c5d96b.png" alt="picgo-qingstor-uploader-configuration.png"></p><p>项目地址：<a href="https://github.com/chengww5217/picgo-plugin-qingstor-uploader" target="_blank" rel="noopener">picgo-plugin-qingstor-uploader</a></p><a id="more"></a><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>插件基于 <a href="https://github.com/PicGo/PicGo-Core" target="_blank" rel="noopener">PicGo-Core</a> 开发，参阅开发文档 <a href="https://picgo.github.io/PicGo-Core-Doc/" target="_blank" rel="noopener">PicGo-Core-Doc</a> 进行开发。</p><ol><li><p>确保已安装 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> 版本 &gt;= 8</p></li><li><p>全局安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn global add picgo <span class="comment"># 或者 npm install picgo -g</span></span><br></pre></td></tr></table></figure></li><li><p>使用插件模板</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">picgo init plugin &lt;your-project-name&gt;</span><br></pre></td></tr></table></figure><ul><li>所有插件以 <code>picgo-plugin-xxx</code> 的方式命名</li><li>按照提示配置你的项目</li></ul></li></ol><h3 id="开发插件"><a href="#开发插件" class="headerlink" title="开发插件"></a>开发插件</h3><blockquote><p>picgo 是个上传的流程系统。因此插件其实就是针对这个流程系统的某个部件或者某些部件的开发。</p></blockquote><p>附一下流程图:</p><p><img src="https://upload-images.jianshu.io/upload_images/16416523-009f39376d56475d.jpg" alt="picgo-core-fix.jpg"></p><blockquote><p>其中可以供开发的部件总共有5个：</p><p>两个模块：</p><ol><li>Transformer</li><li>Uploader</li></ol><p>三个生命周期插件入口：</p><ol><li>beforeTransformPlugins</li><li>beforeUploadPlugins</li><li>afterUploadPlugins</li></ol><p>通常来说如果你只是要实现一个 picgo 默认不支持的图床的话，你只需要开发一个 <code>Uploader</code> 。</p></blockquote><p>我们这里只是开发图床的话就只需要开发 <code>Uploader</code> 即可。</p><hr><p>这里定位到项目的 <code>src/index.ts</code> 或 <code>src/index.js</code> ，</p><p>在这里就是你所要支持图床的配置的地方了。</p><h4 id="图床配置文件"><a href="#图床配置文件" class="headerlink" title="图床配置文件"></a>图床配置文件</h4><p>添加必须的配置项，新增图床配置：</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PluginConfig &#125; <span class="keyword">from</span> <span class="string">'picgo/dist/utils/interfaces'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = (ctx: picgo): PluginConfig[] =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> userConfig = ctx.getConfig(<span class="string">'picBed.qingstor-uploader'</span>)</span><br><span class="line">  <span class="keyword">if</span> (!userConfig) &#123;</span><br><span class="line">    userConfig = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> config = [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'accessKeyId'</span>,</span><br><span class="line">      <span class="keyword">type</span>: <span class="string">'input'</span>,</span><br><span class="line">      <span class="keyword">default</span>: userConfig.accessKeyId || <span class="string">''</span>,</span><br><span class="line">      message: <span class="string">'AccessKeyId 不能为空'</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'accessKeySecret'</span>,</span><br><span class="line">      <span class="keyword">type</span>: <span class="string">'password'</span>,</span><br><span class="line">      <span class="keyword">default</span>: userConfig.accessKeySecret || <span class="string">''</span>,</span><br><span class="line">      message: <span class="string">'AccessKeySecret 不能为空'</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'bucket'</span>,</span><br><span class="line">      <span class="keyword">type</span>: <span class="string">'input'</span>,</span><br><span class="line">      <span class="keyword">default</span>: userConfig.bucket || <span class="string">''</span>,</span><br><span class="line">      message: <span class="string">'Bucket不能为空'</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'zone'</span>,</span><br><span class="line">      <span class="keyword">type</span>: <span class="string">'input'</span>,</span><br><span class="line">      alias: <span class="string">'区域'</span>,</span><br><span class="line">      <span class="keyword">default</span>: userConfig.area || <span class="string">''</span>,</span><br><span class="line">      message: <span class="string">'区域代码不能为空'</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'path'</span>,</span><br><span class="line">      <span class="keyword">type</span>: <span class="string">'input'</span>,</span><br><span class="line">      alias: <span class="string">'存储路径'</span>,</span><br><span class="line">      message: <span class="string">'blog'</span>,</span><br><span class="line">      <span class="keyword">default</span>: userConfig.path || <span class="string">''</span>,</span><br><span class="line">      required: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'customUrl'</span>,</span><br><span class="line">      <span class="keyword">type</span>: <span class="string">'input'</span>,</span><br><span class="line">      alias: <span class="string">'私有云网址'</span>,</span><br><span class="line">      message: <span class="string">'https://qingstor.com'</span>,</span><br><span class="line">      <span class="keyword">default</span>: userConfig.customUrl || <span class="string">''</span>,</span><br><span class="line">      required: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="签名配置"><a href="#签名配置" class="headerlink" title="签名配置"></a>签名配置</h4><p>根据<a href="https://docs.qingcloud.com/qingstor/api/common/signature.html#%E6%9E%84%E5%BB%BA%E7%AD%BE%E5%90%8D%E4%B8%B2" target="_blank" rel="noopener">青云对象存储签名</a>特点，使用 accessKeyId 和 accessKeySecret 生成上传时的签名。</p><ol><li><p>首先观察 <code>strToSign</code> :</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">strToSign = Verb + <span class="string">"\n"</span></span><br><span class="line">              + Content-MD5 + <span class="string">"\n"</span></span><br><span class="line">              + Content-Type + <span class="string">"\n"</span></span><br><span class="line">              + Date + <span class="string">"\n"</span></span><br><span class="line">              (+ Canonicalized Headers + <span class="string">"\n"</span>)</span><br><span class="line">              + Canonicalized Resource</span><br></pre></td></tr></table></figure><p>这里只上传图片，<code>Verb</code> 就是 <code>PUT</code> ，<code>Date</code> 使用 <code>new Date().toUTCString()</code> 。</p><p>考虑到签名的复杂程度，上传时不发送 Content-MD5 和 Content-Type 请求头以降低签名方法的复杂度。</p></li><li><p>然后就是 <code>Canonicalized Headers</code> :</p><blockquote><p>Canonicalized Headers 代表请求头中以 x-qs- 开头的字段。如果该值为空，不保留空白行</p></blockquote><p>这种自定义的请求头肯定是没有的，也可以去掉。</p></li><li><p>Canonicalized Resource 代表请求访问的资源</p><p>默认形式：<code>/bucketName/path/fileName</code></p><p>考虑到 <code>path</code> 和 <code>fileName</code> 可能的中文情况，需要对其 encode 一下。</p></li><li><p>对 <code>strToSign</code> 进行签名</p><p>将API密钥的私钥 (<code>accessKeySecret</code>) 作为 key，使用 <code>Hmac sha256</code> 算法给签名串生成签名， 然后将签名进行 Base64 编码，最后拼接签名。</p></li></ol><p>完整代码如下：</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> crypto <span class="keyword">from</span> <span class="string">'crypto'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// generate QingStor signature</span></span><br><span class="line"><span class="keyword">const</span> generateSignature = (options: <span class="built_in">any</span>, fileName: <span class="built_in">string</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>().toUTCString()</span><br><span class="line">  <span class="keyword">const</span> strToSign = <span class="string">`PUT\n\n\n<span class="subst">$&#123;date&#125;</span>\n/<span class="subst">$&#123;options.bucket&#125;</span>/<span class="subst">$&#123;encodeURI(options.path)&#125;</span>/<span class="subst">$&#123;encodeURI(fileName)&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> signature = crypto.createHmac(<span class="string">'sha256'</span>, options.accessKeySecret).update(strToSign).digest(<span class="string">'base64'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`QS <span class="subst">$&#123;options.accessKeyId&#125;</span>:<span class="subst">$&#123;signature&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="protocol-和-host"><a href="#protocol-和-host" class="headerlink" title="protocol 和 host"></a>protocol 和 host</h4><p>对于配置了 <code>customUrl</code> 的私有云用户，需要获取到 <code>protocol</code> 和 <code>host</code> 。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getHost = (customUrl: <span class="built_in">any</span>): <span class="function"><span class="params">any</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> protocol = <span class="string">'https'</span></span><br><span class="line">  <span class="keyword">let</span> host = <span class="string">'qingstor.com'</span></span><br><span class="line">  <span class="keyword">if</span> (customUrl) &#123;</span><br><span class="line">    <span class="keyword">if</span> (customUrl.startsWith(<span class="string">'http://'</span>)) &#123;</span><br><span class="line">      protocol = <span class="string">'http'</span></span><br><span class="line">      host = customUrl.substring(<span class="number">7</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (customUrl.startsWith(<span class="string">'https://'</span>)) &#123;</span><br><span class="line">      host = customUrl.substring(<span class="number">8</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      host = customUrl</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    protocol: protocol,</span><br><span class="line">    host: host</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置-request"><a href="#配置-request" class="headerlink" title="配置 request"></a>配置 request</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> postOptions = (options: <span class="built_in">any</span>, fileName: <span class="built_in">string</span>, signature: <span class="built_in">string</span>, image: Buffer): <span class="function"><span class="params">any</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> url = getHost(options.customUrl)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    method: <span class="string">'PUT'</span>,</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;url.protocol&#125;</span>://<span class="subst">$&#123;options.zone&#125;</span>.<span class="subst">$&#123;url.host&#125;</span>/<span class="subst">$&#123;options.bucket&#125;</span>/<span class="subst">$&#123;encodeURI(options.path)&#125;</span>/<span class="subst">$&#123;encodeURI(fileName)&#125;</span>`</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      Host: <span class="string">`<span class="subst">$&#123;options.zone&#125;</span>.<span class="subst">$&#123;url.host&#125;</span>`</span>,</span><br><span class="line">      Authorization: signature,</span><br><span class="line">      <span class="built_in">Date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().toUTCString()</span><br><span class="line">    &#125;,</span><br><span class="line">    body: image,</span><br><span class="line">    resolveWithFullResponse: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置插件-Plugin-的-handle"><a href="#配置插件-Plugin-的-handle" class="headerlink" title="配置插件 Plugin 的 handle"></a>配置插件 Plugin 的 handle</h4><p>组合上述方法，处理上传逻辑</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> handle = <span class="keyword">async</span> (ctx: picgo): <span class="built_in">Promise</span>&lt;picgo&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> qingstorOptions = ctx.getConfig(<span class="string">'picBed.qingstor-uploader'</span>)</span><br><span class="line">  <span class="keyword">if</span> (!qingstorOptions) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Can\'t find the qingstor config'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> imgList = ctx.output</span><br><span class="line">    <span class="keyword">const</span> customUrl = qingstorOptions.customUrl</span><br><span class="line">    <span class="keyword">const</span> path = qingstorOptions.path</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> imgList) &#123;</span><br><span class="line">      <span class="keyword">const</span> signature = generateSignature(qingstorOptions, imgList[i].fileName)</span><br><span class="line">      <span class="keyword">let</span> image = imgList[i].buffer</span><br><span class="line">      <span class="keyword">if</span> (!image &amp;&amp; imgList[i].base64Image) &#123;</span><br><span class="line">        image = Buffer.from(imgList[i].base64Image, <span class="string">'base64'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> options = postOptions(qingstorOptions, imgList[i].fileName, signature, image)</span><br><span class="line">      <span class="keyword">let</span> body = <span class="keyword">await</span> ctx.Request.request(options)</span><br><span class="line">      <span class="keyword">if</span> (body.statusCode === <span class="number">200</span> || body.statusCode === <span class="number">201</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> imgList[i].base64Image</span><br><span class="line">        <span class="keyword">delete</span> imgList[i].buffer</span><br><span class="line">        <span class="keyword">const</span> url = getHost(customUrl)</span><br><span class="line">        imgList[i][<span class="string">'imgUrl'</span>] = <span class="string">`<span class="subst">$&#123;url.protocol&#125;</span>://<span class="subst">$&#123;qingstorOptions.zone&#125;</span>.<span class="subst">$&#123;url.host&#125;</span>/<span class="subst">$&#123;qingstorOptions.bucket&#125;</span>/<span class="subst">$&#123;encodeURI(path)&#125;</span>/<span class="subst">$&#123;imgList[i].fileName&#125;</span>`</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Upload failed'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ctx</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err.error === <span class="string">'Upload failed'</span>) &#123;</span><br><span class="line">      ctx.emit(<span class="string">'notification'</span>, &#123;</span><br><span class="line">        title: <span class="string">'上传失败！'</span>,</span><br><span class="line">        body: <span class="string">`请检查你的配置项是否正确`</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ctx.emit(<span class="string">'notification'</span>, &#123;</span><br><span class="line">        title: <span class="string">'上传失败！'</span>,</span><br><span class="line">        body: <span class="string">'请检查你的配置项是否正确'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> err</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注册插件"><a href="#注册插件" class="headerlink" title="注册插件"></a>注册插件</h4><p>将 uploader 注册即可：</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> = <span class="function">(<span class="params">ctx: picgo</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> register = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ctx.helper.uploader.register(<span class="string">'qingstor-uploader'</span>, &#123;</span><br><span class="line">      handle,</span><br><span class="line">      name: <span class="string">'青云 QingStor'</span>,</span><br><span class="line">      config: config</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    uploader: <span class="string">'qingstor-uploader'</span>,</span><br><span class="line">    register</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发布插件"><a href="#发布插件" class="headerlink" title="发布插件"></a>发布插件</h3><ol><li><p>先登录 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a> 账号</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure></li><li><p>发布到 npm 上就可以了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picgo-plugin-qingstor-uploader </tag>
            
            <tag> 青云对象存储图床 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 自定义 View：包含多种状态的下载用圆形进度条</title>
      <link href="/archives/CircleProgressBar.html"/>
      <url>/archives/CircleProgressBar.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Mar 26 2019 17:59:28 GMT+0800 (China Standard Time) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近做项目碰到一个这样的一个需求：需要一个环形的进度条表示一个下载请求的进度加载。<br>同时要以各种不同的图标展现其下载过程中的各个状态：等待、下载中、暂停、错误、完成。</p><p>具体状态对应图标见下图：<br><img src="https://upload-images.jianshu.io/upload_images/4971025-01c9cbca233e944e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="download_status.png"></p><p>以上图标来自<a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a>。</p><p>考虑到其状态多达 5 种之多。用已有的控件组合显示，然后判断状态来控制各图标的显示不太合适。<br>借此机会，简单的撸一个这样的一个自定义控件：CircleProgressBar 来温习下自定义控件的知识。</p><p>直接拷贝 CircleProgressBar 使用：<a href="https://github.com/chengww5217/CircleProgressBarDemo/blob/master/app/src/main/java/com/chengww/circleprogressdemo/CircleProgressBar.java" target="_blank" rel="noopener">CircleProgressBar.java</a></p><a id="more"></a><h2 id="自定义控件"><a href="#自定义控件" class="headerlink" title="自定义控件"></a>自定义控件</h2><p>首先需要的基础知识，你需要了解关于安卓自定义控件的基本原理、控件的绘制过程。<br>推荐看下官方的相关文档 <a href="https://developer.android.com/guide/topics/ui/custom-components" target="_blank" rel="noopener">Custom View Components</a>。注意：文档为英文文档，有墙。</p><p>简单总结下见下表：<br><img src="https://upload-images.jianshu.io/upload_images/4971025-c76053a3e5800e5f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="custom-components-form.png"></p><p>搞清楚上面的基础之后就正式开始自定义控件。如果还没有看过上述文档也可以跟着我把下面的步奏写一遍。</p><h3 id="创建-View"><a href="#创建-View" class="headerlink" title="创建 View"></a>创建 View</h3><p>一般自定义 View 都是继承自 android.view.View。不过既然我们自定义的是 ProgressBar，就没必要重头开始了，直接继承自 android.widget.ProgressBar 。<br>这样 setProgress(int progress); 这些基础方法就没必要再定义了。So，给我的控件取名为 <code>CircleProgressBar extends ProgressBar</code>。</p><p>观察上述几个图标，除了下载中状态有进度加载，其形态有所改变外，其余状态均为一个静态图片。现在只用搞定下载中状态的圆环进度和绘制中间的两条竖线即可。</p><h4 id="定义自定义属性"><a href="#定义自定义属性" class="headerlink" title="定义自定义属性"></a>定义自定义属性</h4><p>我们在使用 Android SDK 提供的控件的时候，可以直接从 <code>.xml</code> 文件中新建，比如新建一个 LinearLayout：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>同时我们还可以直接在 <code>.xml</code> 文件中配置各种属性，如上述代码中的 <code>android:orientation=&quot;horizontal&quot;</code> 。<br>我们自定义的控件当然也要支持配置和一些自定义属性，所以就必须要这个构造方法：<code>public CircleProgressBar(Context context, AttributeSet attrs) {}</code>。<br>这个构造方法允许我们在 <code>.xml</code> 文件中创建和编辑我们自定义控件的实例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CircleProgressBar</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，为了在 <code>.xml</code> 文件中定义我们的自定义属性（eg: color, size, etc.），我们需要新增以下构造方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CircleProgressBar</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>defStyleAttr 这个整型变量是一个定义在 <code>res/values/attrs.xml</code> 文件中的 <code>declare-styleable</code> 值。<br>基于此，我们需要新建 <code>res/values/attrs.xml</code> 文件，并定义一些需要用到的自定义属性。</p><p>观察要实现的外圈进度条，有两个进度：一个用来表示默认的圆形，另一个表示进度的颜色。所以这里涉及到两个进度条颜色宽高的定义。要绘制圆肯定还需要半径。<br>故所有定义的属性如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"CircleProgressBar"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--默认圆的颜色--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"defaultColor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--进度条的颜色--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"reachedColor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--默认圆的高度--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"defaultHeight"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--进度条的高度--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"reachedHeight"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--圆的半径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"radius"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码声明了 5 个自定义属性，它们都是属于 styleable：CircleProgressBar 的。<br>为了方便起见，一般styleable的name和我们自定义控件的类名一样。自定义控件定义好了之后就可以直接使用了。<br>具体自定义属性值含义见 xml 里面的注释。</p><p>在使用中就可以直接设置这些自定义属性了：<br></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.chengww.circleprogressdemo.CircleProgressBar</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"46dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"46dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">"6dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/cp_progress"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:defaultColor</span>=<span class="string">"#D8D8D8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:reachedColor</span>=<span class="string">"#1296DB"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:defaultHeight</span>=<span class="string">"2.5dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:reachedHeight</span>=<span class="string">"2.5dp"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id="获取自定义属性"><a href="#获取自定义属性" class="headerlink" title="获取自定义属性"></a>获取自定义属性</h3><p>既然定义了自定义属性，当然需要获取到具体使用中设置的自定义属性。否则定义自定义属性就没有意义了。<br>首先定义成员变量：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mDefaultColor;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mReachedColor;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mDefaultHeight;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mReachedHeight;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mRadius;</span><br><span class="line"><span class="keyword">private</span> Paint mPaint;</span><br><span class="line"><span class="keyword">private</span> Status mStatus = Status.Waiting;</span><br></pre></td></tr></table></figure><p>然后就是获取成员变量了。还记得我们上文中 Java 代码里面定义的构造方法 <code>public CircleProgressBar(Context context, AttributeSet attrs, int defStyleAttr) {}</code> 吗？<br>没错，就是在这个方法里面获取用户设置的自定义属性值：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CircleProgressBar</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CircleProgressBar);</span><br><span class="line">    <span class="comment">//默认圆的颜色</span></span><br><span class="line">    mDefaultColor = typedArray.getColor(R.styleable.CircleProgressBar_defaultColor, Color.parseColor(<span class="string">"#D8D8D8"</span>));</span><br><span class="line">    <span class="comment">//进度条的颜色</span></span><br><span class="line">    mReachedColor = typedArray.getColor(R.styleable.CircleProgressBar_reachedColor, Color.parseColor(<span class="string">"#1296DB"</span>));</span><br><span class="line">    <span class="comment">//默认圆的高度</span></span><br><span class="line">    mDefaultHeight = typedArray.getDimension(R.styleable.CircleProgressBar_defaultHeight, dp2px(context, <span class="number">2.5f</span>));</span><br><span class="line">    <span class="comment">//进度条的高度</span></span><br><span class="line">    mReachedHeight = typedArray.getDimension(R.styleable.CircleProgressBar_reachedHeight, dp2px(context, <span class="number">2.5f</span>));</span><br><span class="line">    <span class="comment">//圆的半径</span></span><br><span class="line">    mRadius = typedArray.getDimension(R.styleable.CircleProgressBar_radius, dp2px(context, <span class="number">17</span>));</span><br><span class="line">    typedArray.recycle();</span><br><span class="line"></span><br><span class="line">    setPaint();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们在 xml 文件中创建一个 View 时，所有在 xml 文件中声明的属性都会被传入到该 View 的上述构造方法中。<br>通过调用 Context 的 obtainStyledAttributes() 方法返回一个 TypedArray 对象。然后直接用 TypedArray 对象获取自定义属性的值，第二个参数是获取不到时取得默认值。<br>由于 TypedArray 对象是共享的资源，所以在获取完值之后必须要调用 recycle() 方法来回收。</p><h3 id="使用-Java-方法设置自定义属性"><a href="#使用-Java-方法设置自定义属性" class="headerlink" title="使用 Java 方法设置自定义属性"></a>使用 Java 方法设置自定义属性</h3><p>上述方法只能通过 xml 文件设置自定义属性，只有在 View 被初始化的时候才能获取到。要想在运行时使用 Java 方法修改某个属性值，对某个属性值（成员变量）新增 Getter 和 Setter 方法即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Status mStatus = Status.Waiting;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Status <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mStatus;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(Status status)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mStatus == status) <span class="keyword">return</span>;</span><br><span class="line">    mStatus = status;</span><br><span class="line">    invalidate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 setStatus 方法，在为 mStatus 赋值之后，调用了 invalidate() 方法，我们自定义控件的属性发生改变之后，控件的样子也可能发生改变，在这种情况下就需要调用 invalidate() 方法让系统去调用 View 的 onDraw() 重新绘制。<br>同样的，控件属性的改变可能导致控件所占的大小和形状发生改变，可以调用 requestLayout() 来请求测量获取一个新的布局位置。<br>注：如改变某属性后，确定控件不会变更大小和位置，可以不需要调用 requestLayout() 方法。同样，如控件不需要重绘，可以不需要调用 invalidate() 方法。</p><p>获取基础的一些属性，这里 mStatus 用来表示当前 View 的状态以对应各种下载状态。我们用这些状态来判定如何绘制合适的效果。各状态用一个内部枚举来表示。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Status &#123;</span><br><span class="line">    Waiting,</span><br><span class="line">    Pause,</span><br><span class="line">    Loading,</span><br><span class="line">    Error,</span><br><span class="line">    Finish</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述 setPaint() 为初始化 paint 方法。用以绘制进度圆环和各静态 Drawable。附上 setPaint() 方法代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setPaint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">    <span class="comment">//下面是设置画笔的一些属性</span></span><br><span class="line">    mPaint.setAntiAlias(<span class="keyword">true</span>);<span class="comment">//抗锯齿</span></span><br><span class="line">    mPaint.setDither(<span class="keyword">true</span>);<span class="comment">//防抖动，绘制出来的图要更加柔和清晰</span></span><br><span class="line">    mPaint.setStyle(Paint.Style.STROKE);<span class="comment">//设置填充样式</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Paint.Style.FILL    :填充内部</span></span><br><span class="line"><span class="comment">     *  Paint.Style.FILL_AND_STROKE  ：填充内部和描边</span></span><br><span class="line"><span class="comment">     *  Paint.Style.STROKE  ：仅描边</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    mPaint.setStrokeCap(Paint.Cap.ROUND);<span class="comment">//设置画笔笔刷类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理-View-的布局"><a href="#处理-View-的布局" class="headerlink" title="处理 View 的布局"></a>处理 View 的布局</h3><h4 id="View-的测量"><a href="#View-的测量" class="headerlink" title="View 的测量"></a>View 的测量</h4><p>一个 View 在展示时总是其宽和高，测量 View 就是为了能够让自定义的控件能够根据各种不同的情况以合适的宽高去展示。<br>具体使用到的方法为 onMeasure() 方法。该方法重写自系统的方法，包含两个参数：int widthMeasureSpec, int heightMeasureSpec。<br>这两个参数包含了两个重要的信息：Mode 和 Size。获取 Mode 和 Size：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class="line"><span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br></pre></td></tr></table></figure><p>以上代码可以获取 widthMode、heightMode、widthSize、heightSize 共四个参数。</p><p>Mode 代表了当前控件的父控件告诉我们控件，你应该按怎样的方式来布局。<br>Mode 有三个可选值：EXACTLY、AT_MOST、UNSPECIFIED。它们的含义是：</p><ul><li>EXACTLY：父控件告诉我们子控件了一个确定的大小，你就按这个大小来布局。比如我们指定了确定的 dp 值和 match_parent 的情况。</li><li>AT_MOST：当前控件不能超过一个固定的最大值，一般是 wrap_content 的情况。</li><li>UNSPECIFIED：当前控件没有限制，要多大就有多大，这种情况很少出现。</li></ul><p>Size 其实就是父布局传递过来的一个大小，父布局希望当前布局的大小。</p><p>下面是我们代码中 onMeasure() 方法的写法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">    <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> paintHeight = Math.max(mReachedHeight, mDefaultHeight);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (heightMode != MeasureSpec.EXACTLY) &#123;</span><br><span class="line">        <span class="keyword">int</span> exceptHeight = getPaddingTop() + getPaddingBottom() + mRadius * <span class="number">2</span> + paintHeight;</span><br><span class="line">        heightMeasureSpec = MeasureSpec.makeMeasureSpec(exceptHeight, MeasureSpec.EXACTLY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (widthMode != MeasureSpec.EXACTLY) &#123;</span><br><span class="line">        <span class="keyword">int</span> exceptWidth = getPaddingLeft() + getPaddingRight() + mRadius * <span class="number">2</span> + paintHeight;</span><br><span class="line">        widthMeasureSpec = MeasureSpec.makeMeasureSpec(exceptWidth, MeasureSpec.EXACTLY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们只需要处理宽高没有精确指定的情况，通过 padding 加上整个圆以及 Paint 的宽度计算出具体的值。</p><p>接下来就是绘制效果了。</p><h3 id="绘制-View"><a href="#绘制-View" class="headerlink" title="绘制 View"></a>绘制 View</h3><p>如开始所述：观察上述几个图标，除了下载中状态有进度加载，其形态有所改变外，其余状态均为一个静态图片。绘制其余状态静态图片可以使用：<br><code>drawable.draw(canvas);</code> 方法。现在说说如何绘制下载中这个状态。</p><p>重写 onDraw() 方法，然后我们开始绘制圆：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">canvas.translate(getPaddingStart(), getPaddingTop());</span><br><span class="line">mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line"><span class="comment">//画默认圆(边框)的一些设置</span></span><br><span class="line">mPaint.setColor(mDefaultColor);</span><br><span class="line">mPaint.setStrokeWidth(mDefaultHeight);</span><br><span class="line">canvas.drawCircle(mRadius, mRadius, mRadius, mPaint);</span><br></pre></td></tr></table></figure><p>通过 <code>canvas.drawCircle(mRadius, mRadius, mRadius, mPaint);</code> 绘制默认状态下的圆。之后改变画笔的颜色，根据进度绘制圆弧。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//画进度条的一些设置</span></span><br><span class="line">mPaint.setColor(mReachedColor);</span><br><span class="line">mPaint.setStrokeWidth(mReachedHeight);</span><br><span class="line"><span class="comment">//根据进度绘制圆弧</span></span><br><span class="line"><span class="keyword">float</span> sweepAngle = getProgress() * <span class="number">1.0f</span> / getMax() * <span class="number">360</span>;</span><br><span class="line">canvas.drawArc(<span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, mRadius * <span class="number">2</span>, mRadius * <span class="number">2</span>), -<span class="number">90</span>, sweepAngle, <span class="keyword">false</span>, mPaint);</span><br></pre></td></tr></table></figure><p>最后绘制圆中间的两条竖线下载中状态就完成了。下面是一个示例，绘制竖线宽度为 2/5 半径(1/5 + 1/5)，高度为 1/2 半径(1/2 + 1/2)：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">mPaint.setStrokeWidth(dp2px(getContext(), <span class="number">2</span>));</span><br><span class="line">mPaint.setColor(Color.parseColor(<span class="string">"#667380"</span>));</span><br><span class="line">canvas.drawLine(mRadius * <span class="number">4</span> / <span class="number">5</span>, mRadius * <span class="number">3</span> / <span class="number">4</span>, mRadius * <span class="number">4</span> / <span class="number">5</span>, <span class="number">2</span> * mRadius - (mRadius * <span class="number">3</span> / <span class="number">4</span>), mPaint);</span><br><span class="line">canvas.drawLine(<span class="number">2</span> * mRadius - (mRadius * <span class="number">4</span> / <span class="number">5</span>), mRadius * <span class="number">3</span> / <span class="number">4</span>, <span class="number">2</span> * mRadius - (mRadius * <span class="number">4</span> / <span class="number">5</span>), <span class="number">2</span> * mRadius - (mRadius * <span class="number">3</span> / <span class="number">4</span>), mPaint);</span><br></pre></td></tr></table></figure><p>然后通过判断 mStatus 来绘制不同的状态即可完成 onDraw() 方法即可。完整 onDraw() 代码和相关 dp2px 方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里canvas.save();和canvas.restore();是两个相互匹配出现的，作用是用来保存画布的状态和取出保存的状态的</span></span><br><span class="line"><span class="comment">     * 当我们对画布进行旋转，缩放，平移等操作的时候其实我们是想对特定的元素进行操作,但是当你用canvas的方法来进行这些操作的时候，其实是对整个画布进行了操作，</span></span><br><span class="line"><span class="comment">     * 那么之后在画布上的元素都会受到影响，所以我们在操作之前调用canvas.save()来保存画布当前的状态，当操作之后取出之前保存过的状态，</span></span><br><span class="line"><span class="comment">     * (比如：前面元素设置了平移或旋转的操作后，下一个元素在进行绘制之前执行了canvas.save();和canvas.restore()操作)这样后面的元素就不会受到(平移或旋转的)影响</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    canvas.save();</span><br><span class="line">    <span class="comment">//为了保证最外层的圆弧全部显示，我们通常会设置自定义view的padding属性，这样就有了内边距，所以画笔应该平移到内边距的位置，这样画笔才会刚好在最外层的圆弧上</span></span><br><span class="line">    <span class="comment">//画笔平移到指定paddingLeft， getPaddingTop()位置</span></span><br><span class="line">    canvas.translate(getPaddingStart(), getPaddingTop());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mDiameter = (<span class="keyword">int</span>) (mRadius * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (mStatus == Status.Loading) &#123;</span><br><span class="line">        mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        <span class="comment">//画默认圆(边框)的一些设置</span></span><br><span class="line">        mPaint.setColor(mDefaultColor);</span><br><span class="line">        mPaint.setStrokeWidth(mDefaultHeight);</span><br><span class="line">        canvas.drawCircle(mRadius, mRadius, mRadius, mPaint);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//画进度条的一些设置</span></span><br><span class="line">        mPaint.setColor(mReachedColor);</span><br><span class="line">        mPaint.setStrokeWidth(mReachedHeight);</span><br><span class="line">        <span class="comment">//根据进度绘制圆弧</span></span><br><span class="line">        <span class="keyword">float</span> sweepAngle = getProgress() * <span class="number">1.0f</span> / getMax() * <span class="number">360</span>;</span><br><span class="line">        canvas.drawArc(<span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, mRadius * <span class="number">2</span>, mRadius * <span class="number">2</span>), -<span class="number">90</span>, sweepAngle, <span class="keyword">false</span>, mPaint);</span><br><span class="line"></span><br><span class="line">        mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mPaint.setStrokeWidth(dp2px(getContext(), <span class="number">2</span>));</span><br><span class="line">        mPaint.setColor(Color.parseColor(<span class="string">"#667380"</span>));</span><br><span class="line">        canvas.drawLine(mRadius * <span class="number">4</span> / <span class="number">5</span>, mRadius * <span class="number">3</span> / <span class="number">4</span>, mRadius * <span class="number">4</span> / <span class="number">5</span>, <span class="number">2</span> * mRadius - (mRadius * <span class="number">3</span> / <span class="number">4</span>), mPaint);</span><br><span class="line">        canvas.drawLine(<span class="number">2</span> * mRadius - (mRadius * <span class="number">4</span> / <span class="number">5</span>), mRadius * <span class="number">3</span> / <span class="number">4</span>, <span class="number">2</span> * mRadius - (mRadius * <span class="number">4</span> / <span class="number">5</span>), <span class="number">2</span> * mRadius - (mRadius * <span class="number">3</span> / <span class="number">4</span>), mPaint);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> drawableInt;</span><br><span class="line">        <span class="keyword">switch</span> (mStatus) &#123;</span><br><span class="line">            <span class="keyword">case</span> Waiting:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                drawableInt = R.mipmap.ic_waiting;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Pause:</span><br><span class="line">                drawableInt = R.mipmap.ic_pause;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Finish:</span><br><span class="line">                drawableInt = R.mipmap.ic_finish;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Error:</span><br><span class="line">                drawableInt = R.mipmap.ic_error;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Drawable drawable = getContext().getResources().getDrawable(drawableInt);</span><br><span class="line">        drawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, mDiameter, mDiameter);</span><br><span class="line">        drawable.draw(canvas);</span><br><span class="line">    &#125;</span><br><span class="line">    canvas.restore();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">dp2px</span><span class="params">(Context context, <span class="keyword">float</span> dp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> scale = context.getResources().getDisplayMetrics().density;</span><br><span class="line">    <span class="keyword">return</span> dp * scale + <span class="number">0.5f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理用户交互"><a href="#处理用户交互" class="headerlink" title="处理用户交互"></a>处理用户交互</h3><p>由于对于下载更新进度的情况来说，该控件只做状态显示，所以这一步不需要，要使用的话自己设置点击事件就可以了。</p><p>完成品效果 gif：</p><p><img src="https://upload-images.jianshu.io/upload_images/4971025-64e84be2da827921.gif?imageMogr2/auto-orient/strip" alt="CircleProgressBarDemo.gif"></p><p>演示 apk 下载：<br><a href="https://js-cdn.pek3b.qingstor.com/files/CircleProgressBarDemo_1.0.apk" target="_blank" rel="noopener">https://blog.chengww.com/files/CircleProgressBarDemo_1.0.apk</a></p><p>源码下载：<a href="https://github.com/chengww5217/CircleProgressBarDemo" target="_blank" rel="noopener">https://github.com/chengww5217/CircleProgressBarDemo</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 自定义 View </tag>
            
            <tag> Custom View Components </tag>
            
            <tag> CircleProgressBar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Youtube-dl 下载 Youtube 1080P+ 视频</title>
      <link href="/archives/youtube_download.html"/>
      <url>/archives/youtube_download.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Mar 26 2019 17:59:28 GMT+0800 (China Standard Time) --><p><img src="https://upload-images.jianshu.io/upload_images/4971025-9c63db4ba9e0f53e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="youtube-crowd-uproar-protest.jpg"></p><p>鉴于 Youtube 将 1080P+ 画质的内容的音视频进行了分离。<br>之前的不少 Youtube 下载工具下载 1080P+ 画质都有一定程度的缺陷，现在 Youtube-dl 可以完美解决这个问题。</p><a id="more"></a><h3 id="What-is-it"><a href="#What-is-it" class="headerlink" title="What is it?"></a>What is it?</h3><p>来一段官网的介绍：</p><blockquote><p>youtube-dl is a command-line program to download videos from YouTube.com and a few <a href="http://rg3.github.io/youtube-dl/supportedsites.html" target="_blank" rel="noopener">more sites</a>. It requires the <a href="https://www.python.org/" target="_blank" rel="noopener">Python interpreter</a>, version 2.6, 2.7, or 3.2+, and it is not platform specific. It should work in your Unix box, in Windows or in Mac OS X. It is released to the public domain, which means you can modify it, redistribute it or use it however you like. The project is currently being developed at GitHub.</p></blockquote><p>翻译下来大概的意思：</p><p>Youtube-dl 是一个命令行程序，用于从 YouTube.com 和<a href="http://rg3.github.io/youtube-dl/supportedsites.html" target="_blank" rel="noopener">其他视频网站</a>下载视频。其运行需要<a href="https://www.python.org/" target="_blank" rel="noopener">Python解释器</a>，要求版本 2.6, 2.7 或 3.2+，并且它是全平台兼容的软件。<br>它可以在您的 Unix，Windows 或 Mac OS X 机器中运行。该项目已开源，这意味着您可以对其进行修改，重新分发或随意使用它。该项目目前正在 GitHub 上开发。</p><p>该工具支持断点续传，下载某个视频中途关闭后，下次下载同一个视频，进度会恢复。<br>文件下载位置保存在命令行的当前目录，要想切换保存位置，请使用 cd 命令切换到其他目录。<br>如果您电脑上已经安装了 Ffmpeg，youtube-dl 还会自动合并音视频。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>参考 <a href="https://www.runoob.com/python/python-install.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-install.html</a> 安装 Python 3（Windows 系统记得勾选 <code>Add Python 3.x to Path</code> 以及安装 pip 选项）</p><p><img src="https://upload-images.jianshu.io/upload_images/4971025-13a632fb2f6213dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="python_install_help_1.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/4971025-e148f21721994707.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="python_install_help_2.png"></p><p>前往 <a href="http://ffmpeg.org/download.html" target="_blank" rel="noopener">http://ffmpeg.org/download.html</a> 下载安装 FFmpeg ，并将解压后的 bin 目录设置为环境变量。</p><p>使用 pip 安装 youtube-dl<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install youtube-dl</span><br></pre></td></tr></table></figure><p></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h4><p>鉴于国内的万里长城问题，这个要拿来作为第一位开讲了。<br>可以直接设置本次命令行的代理：</p><p>Windows： <code>set https_proxy=http://127.0.0.1:1080</code><br>Linux or Mac: <code>export https_proxy=http://127.0.0.1:1080</code></p><p>** 如不想使用全局代理，可以在每次需要代理的时候，<br>在每次 youtube-dl 命令后附上 <code>--proxy &quot;https://127.0.0.1:1080&quot;</code><br>如： <code>youtube-dl -F [url] --proxy &quot;https://127.0.0.1:1080&quot;</code></p><h4 id="列举视频所有格式"><a href="#列举视频所有格式" class="headerlink" title="列举视频所有格式"></a>列举视频所有格式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">youtube-dl -F [url]</span><br></pre></td></tr></table></figure><p>或者<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">youtube-dl --list-formats [url]</span><br></pre></td></tr></table></figure><p></p><p>这是一个列清单参数，执行后并不会下载视频，但能知道这个目标视频都有哪些格式存在，下一步进行下载的格式选择。</p><p>举例：输入 <code>youtube-dl -F https://www.youtube.com/watch?v=UyJ8Qbh_LH0</code><br>将出现以下回应<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[youtube] UyJ8Qbh_LH0: Downloading webpage</span><br><span class="line">[youtube] UyJ8Qbh_LH0: Downloading video info webpage</span><br><span class="line">[youtube] UyJ8Qbh_LH0: Downloading js player vfl-mZlA8</span><br><span class="line">[info] Available formats for UyJ8Qbh_LH0:</span><br><span class="line">format code  extension  resolution note</span><br><span class="line">249          webm       audio only DASH audio   55k , opus @ 50k, 1.64MiB</span><br><span class="line">250          webm       audio only DASH audio   70k , opus @ 70k, 2.10MiB</span><br><span class="line">171          webm       audio only DASH audio  115k , vorbis@128k, 3.88MiB</span><br><span class="line">140          m4a        audio only DASH audio  128k , m4a_dash container, mp4a.40.2@128k, 4.47MiB</span><br><span class="line">251          webm       audio only DASH audio  131k , opus @160k, 3.96MiB</span><br><span class="line">278          webm       256x144    144p   96k , webm container, vp9, 30fps, video only, 3.28MiB</span><br><span class="line">160          mp4        256x144    144p  110k , avc1.4d400c, 30fps, video only, 3.12MiB</span><br><span class="line">242          webm       426x240    240p  224k , vp9, 30fps, video only, 7.39MiB</span><br><span class="line">133          mp4        426x240    240p  318k , avc1.4d4015, 30fps, video only, 7.36MiB</span><br><span class="line">243          webm       640x360    360p  413k , vp9, 30fps, video only, 14.03MiB</span><br><span class="line">134          mp4        640x360    360p  712k , avc1.4d401e, 30fps, video only, 15.74MiB</span><br><span class="line">244          webm       854x480    480p  759k , vp9, 30fps, video only, 25.41MiB</span><br><span class="line">135          mp4        854x480    480p 1075k , avc1.4d401f, 30fps, video only, 24.75MiB</span><br><span class="line">136          mp4        1280x720   720p 1477k , avc1.4d401f, 30fps, video only, 35.71MiB</span><br><span class="line">247          webm       1280x720   720p 1513k , vp9, 30fps, video only, 45.11MiB</span><br><span class="line">17           3gp        176x144    small , mp4v.20.3, mp4a.40.2@ 24k, 2.68MiB</span><br><span class="line">36           3gp        320x180    small , mp4v.20.3, mp4a.40.2, 7.84MiB</span><br><span class="line">18           mp4        640x360    medium , avc1.42001E, mp4a.40.2@ 96k, 23.76MiB (best)</span><br></pre></td></tr></table></figure><p></p><h3 id="选取格式下载"><a href="#选取格式下载" class="headerlink" title="选取格式下载"></a>选取格式下载</h3><p>可以选择单视频，单音频，也可以选择视频 + 音频 合并。<br>下载指定质量的视频和音频并自动合并：<br><code>youtube-dl -f [format code] [url]</code> （请注意该 f 为小写）<br>通过上一步获取到了所有视频格式的清单，最左边一列就是编号对应着不同的格式.<br>由于 YouTube 的 1080p 及以上的分辨率都是音视频分离的，所以我们需要分别下载视频和音频,可以使用 <code>247+251</code> （或 <code>bestvideo+bestaudio</code>）这样的组合.<br>如果系统中安装了 FFmpeg 的话, youtube-dl 会自动合并下下好的视频和音频, 然后自动删除单独的音视频文件。</p><p>举例：<br>输入 <code>youtube-dl -f 247+251 https://www.youtube.com/watch?v=UyJ8Qbh_LH0</code><br>或输入 <code>youtube-dl -f bestvideo+bestaudio https://www.youtube.com/watch?v=UyJ8Qbh_LH0</code></p><p>将出现以下回应<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[youtube] UyJ8Qbh_LH0: Downloading webpage</span><br><span class="line">[youtube] UyJ8Qbh_LH0: Downloading video info webpage</span><br><span class="line">[youtube] UyJ8Qbh_LH0: Downloading js player vfls4aurX</span><br><span class="line">[download] Destination: 小さな恋のうた／mongol800（Cover）-UyJ8Qbh_LH0.f247.webm</span><br><span class="line">[download]   1.7% of 45.11MiB at 171.76KiB/s ETA 04:24</span><br></pre></td></tr></table></figure><p></p><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><p>下载字幕</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">youtubd-dl --write-sub [url] //这样会下载一个vtt格式的英文字幕和mkv格式的1080p视频下来</span><br><span class="line"></span><br><span class="line">youtube-dl --write-sub --skip-download [url] //下载单独的vtt字幕文件,而不会下载视频</span><br><span class="line"></span><br><span class="line">youtube-dl --write-sub --all-subs [url] //下载所有语言的字幕(如果有的话)</span><br><span class="line"></span><br><span class="line">youtube-dl --write-auto-sub [url] //下载自动生成的字幕(YouTube only)</span><br></pre></td></tr></table></figure><p>更多命令参见项目 github 首页： <a href="https://github.com/rg3/youtube-dl" target="_blank" rel="noopener">https://github.com/rg3/youtube-dl</a></p><h3 id="命令集合"><a href="#命令集合" class="headerlink" title="命令集合"></a>命令集合</h3><p>只是简单下载视频的话，一直输入命令未免太过繁琐。附上可以免输入的批处理脚本和 shell 脚本。<br>(注：下载位置，代理等请自行核对修改)</p><p>windows 机器复制下方批处理脚本，以文本方式保存，修改后缀为 <code>.bat</code> 保存。</p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">:<span class="built_in">start</span></span><br><span class="line">::设置下载位置</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">dir</span>=C:</span><br><span class="line"><span class="built_in">pushd</span> <span class="variable">%dir%</span></span><br><span class="line"><span class="keyword">if</span> /i <span class="keyword">not</span> <span class="variable">%dir%</span>==<span class="variable">%cd%</span> <span class="keyword">goto</span> :<span class="built_in">start</span></span><br><span class="line"><span class="built_in">echo</span> 油管下载器，有代理。当前保存路径：<span class="variable">%cd%</span></span><br><span class="line"><span class="built_in">echo</span> 设置代理 http_proxy=http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">1080</span></span><br><span class="line"><span class="built_in">set</span> http_proxy=http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">1080</span></span><br><span class="line">:download</span><br><span class="line"><span class="built_in">set</span> /p input=请输入视频链接：</span><br><span class="line"><span class="built_in">set</span> input=<span class="variable">%input:&amp;=^^^&amp;%</span></span><br><span class="line">youtube-dl -F <span class="variable">%input%</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">errorlevel</span> <span class="number">1</span> <span class="keyword">goto</span> :download</span><br><span class="line"><span class="built_in">set</span> /p code=请输入视频格式编号：</span><br><span class="line">youtube-dl -f <span class="variable">%code%</span> <span class="variable">%input%</span></span><br><span class="line">::--external-downloader aria2c --external-downloader-args "-x <span class="number">8</span>  -k <span class="number">1</span>M"</span><br><span class="line"><span class="keyword">goto</span> :download</span><br></pre></td></tr></table></figure><p>Linux or Mac 复制下方 shell 脚本，以文本方式保存，修改后缀为 <code>.sh</code> 保存。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#设置下载路径</span></span><br><span class="line"><span class="built_in">export</span> dir=~</span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line"><span class="keyword">if</span> [[ $(<span class="built_in">cd</span> <span class="variable">$dir</span>;<span class="built_in">pwd</span>) != <span class="variable">$dir</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> 不能设置下载目录为<span class="variable">$dir</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> 油管下载器，有代理。当前保存路径：<span class="variable">$dir</span></span><br><span class="line">start</span><br><span class="line"><span class="built_in">echo</span> 设置代理 http_proxy=http://127.0.0.1:1080</span><br><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:1080</span><br><span class="line"><span class="function"><span class="title">download</span></span>()&#123;</span><br><span class="line"><span class="built_in">echo</span> 请输入视频格式编号：</span><br><span class="line"><span class="built_in">read</span> code</span><br><span class="line">youtube-dl -f <span class="variable">$code</span> <span class="variable">$input</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> [[ <span class="literal">true</span> ]]; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> 请输入视频链接：</span><br><span class="line">    <span class="built_in">read</span> input</span><br><span class="line">    youtube-dl -F <span class="variable">$input</span></span><br><span class="line">    <span class="keyword">if</span> [[ $? -eq 0 ]]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">    download</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> youtube-dl </tag>
            
            <tag> Youtube </tag>
            
            <tag> YouTube 下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 安装与配置 ShadowSocks 服务端</title>
      <link href="/archives/shadowsocks.html"/>
      <url>/archives/shadowsocks.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Mar 26 2019 17:59:28 GMT+0800 (China Standard Time) --><p><img src="https://upload-images.jianshu.io/upload_images/4971025-d3d15c828037f308.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="shadowsocks.jpg"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着 “净网2018” 专项整治行动的开展，鉴于近期墙内形式的严峻，搜索 ShadowSocks 安装教程也很难搜到了。<br>恰逢近期亚太一区的网络状态堪忧，安装教程找半天，思来想去索性就自己写一篇博文，方便以后自己安装。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>ShadowSocks，中文名影梭，使用socks5代理，在中国大陆广泛用于翻墙，速度比 pptp 和 OpenVPN 要快，是一款翻墙必备神器。</p><h3 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h3><p>安装 ShadowSocks 首先要安装 pip。<br>Pip 是安装 python 包的工具，提供了安装包，列出已经安装的包，升级包以及卸载包的功能。<br>Pip 是对 easy_install 的取代，提供了和 easy_install 相同的查找包的功能，因此可以使用 easy_install 安装的包也同样可以使用 pip 进行安装。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install python-setuptools &amp;&amp; easy_install pip</span><br></pre></td></tr></table></figure><h3 id="安装-ShadowSocks"><a href="#安装-ShadowSocks" class="headerlink" title="安装 ShadowSocks"></a>安装 ShadowSocks</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><h3 id="创建配置文件-etc-shadowsocks-json"><a href="#创建配置文件-etc-shadowsocks-json" class="headerlink" title="创建配置文件 /etc/shadowsocks.json"></a>创建配置文件 /etc/shadowsocks.json</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch /etc/shadowsocks.json</span><br><span class="line">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p>修改配置文件为如下配置：</p><ul><li>单用户</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>: <span class="number">8388</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>: <span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"your-password"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>: <span class="string">"rc4-md5"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多用户</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>: <span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"port_password"</span>: &#123;</span><br><span class="line">        <span class="attr">"8989"</span>: <span class="string">"password0"</span>,</span><br><span class="line">        <span class="attr">"9001"</span>: <span class="string">"password1"</span>,</span><br><span class="line">        <span class="attr">"9002"</span>: <span class="string">"password2"</span>,</span><br><span class="line">        <span class="attr">"9003"</span>: <span class="string">"password3"</span>,</span><br><span class="line">        <span class="attr">"9004"</span>: <span class="string">"password4"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"timeout"</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>: <span class="string">"rc4-md5"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置文件各字段的含义：</p><ul><li>server：服务器 IP (IPv4/IPv6)，注意这也将是服务端监听的 IP 地址</li><li>server_port：监听的服务器端口</li><li>local_address：服务端本地监听的 IP 地址</li><li>local_port：服务端本地端口</li><li>password：用来加密的密码</li><li>timeout：超时时间（秒）</li><li>method：加密方式，官方默认使用 aes-256-cfb，推荐使用 rc4-md5，RC4 比 AES 速度快好几倍</li><li>fast_open：是否快速启动，true 或 false</li></ul><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start #启动</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d stop #停止</span><br></pre></td></tr></table></figure><p>官方的<a href="https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File" target="_blank" rel="noopener">单用户配置</a>，<a href="https://github.com/shadowsocks/shadowsocks/wiki/Configure-Multiple-Users" target="_blank" rel="noopener">多用户配置</a>。</p><h2 id="客户端下载地址"><a href="#客户端下载地址" class="headerlink" title="客户端下载地址"></a>客户端下载地址</h2><p>附上各客户端的下载地址</p><p><img src="https://upload-images.jianshu.io/upload_images/4971025-a7b2911df9112de5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Windows"></p><ul><li>shadowsocks-win<ul><li><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">GitHub</a></li></ul></li><li>Shadowsocks-Qt5<ul><li><a href="https://github.com/shadowsocks/shadowsocks-qt5/releases" target="_blank" rel="noopener">GitHub</a></li></ul></li><li>Outline Windows<ul><li><a href="https://github.com/Jigsaw-Code/outline-client/" target="_blank" rel="noopener">GitHub</a></li><li><a href="https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/client/Outline-Client.exe" target="_blank" rel="noopener">Direct Download</a></li></ul></li><li>Command-line Client<ul><li>pip install shadowsocks</li></ul></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4971025-a8b4f07139ce59ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Max OS X"></p><ul><li>ShadowsocksX-NG<ul><li><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases" target="_blank" rel="noopener">GitHub</a></li></ul></li><li>Outline macOS<ul><li><a href="https://github.com/Jigsaw-Code/outline-client/" target="_blank" rel="noopener">GitHub</a></li><li><a href="https://itunes.apple.com/app/outline-app/id1356178125" target="_blank" rel="noopener">App Store</a></li></ul></li><li>Command-line Client<ul><li>pip install shadowsocks</li><li>brew install shadowsocks-libev</li><li>cpan Net::Shadowsocks</li></ul></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4971025-de805e82ca3d209f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Linux"></p><ul><li>Shadowsocks-Qt5<ul><li><a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation" target="_blank" rel="noopener">GitHub</a></li></ul></li><li>Command-line Client<ul><li>pip install shadowsocks</li><li>apt-get install shadowsocks-libev</li><li>cpan Net::Shadowsocks</li></ul></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4971025-46c35aa8f5e0ec2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Android"></p><ul><li>Outline Android<ul><li><a href="https://github.com/Jigsaw-Code/outline-releases/blob/master/client/Outline.apk?raw=true" target="_blank" rel="noopener">Direct Download</a></li><li><a href="https://github.com/Jigsaw-Code/outline-client/" target="_blank" rel="noopener">GitHub</a></li><li><a href="https://play.google.com/store/apps/details?id=org.outline.android.client" target="_blank" rel="noopener">Play Store</a></li></ul></li><li>shadowsocks-android<ul><li><a href="https://play.google.com/store/apps/details?id=com.github.shadowsocks" target="_blank" rel="noopener">Google Play</a></li><li><a href="https://play.google.com/apps/testing/com.github.shadowsocks" target="_blank" rel="noopener">Google Play-Beta</a></li></ul></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4971025-bf6c95a2d8a11f72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iOS"></p><ul><li>Wingy<ul><li><a href="https://itunes.apple.com/us/app/wingy-http-s-socks5-proxy-utility/id1178584911" target="_blank" rel="noopener">App Store</a></li></ul></li><li>MobileShadowSocks<ul><li><a href="http://apt.thebigboss.org/onepackage.php?bundleid=com.linusyang.shadowsocks" target="_blank" rel="noopener">Big Boss</a></li></ul></li><li>Outline iOS<ul><li><a href="https://github.com/Jigsaw-Code/outline-client/" target="_blank" rel="noopener">GitHub</a></li><li><a href="https://itunes.apple.com/app/outline-app/id1356177741" target="_blank" rel="noopener">App Store</a></li></ul></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4971025-5da75623c67cd0bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OpenWRT"></p><ul><li>shadowsocks-libev<ul><li>opkg install shadowsocks-libev</li></ul></li><li>shadowsocks-libev-polarssl<ul><li>opkg install shadowsocks-libev-polarssl</li></ul></li></ul><p>官网地址（需要翻墙）：</p><p><a href="https://shadowsocks.org/en/download/clients.html" target="_blank" rel="noopener">https://shadowsocks.org/en/download/clients.html</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShadowSocks </tag>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 兼容 Let’s Encrypt 证书</title>
      <link href="/archives/Java_compatible_certificate_of_Lets_Encrypt.html"/>
      <url>/archives/Java_compatible_certificate_of_Lets_Encrypt.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Mar 26 2019 17:59:28 GMT+0800 (China Standard Time) --><p>最近公司打算将网站 HTTPS 证书更换为 Let’s Encrypt 的证书。虽然现在主流浏览器已经信任 Let’s Encrypt 证书了，但是对于一些 Java 老版本，还是会出现不兼容的情况。</p><p><img src="https://upload-images.jianshu.io/upload_images/4971025-d05908e031988574.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hello_world_lets_encrypt.png"></p><p>为解决此问题，本文应运而生。</p><a id="more"></a><h2 id="什么是-Let’s-Encrypt"><a href="#什么是-Let’s-Encrypt" class="headerlink" title="什么是 Let’s Encrypt"></a>什么是 Let’s Encrypt</h2><p>Let’s Encrypt 是一个免费，自动化和开放的证书颁发机构（CA），为公益而运行，由 <a href="https://letsencrypt.org/isrg/" target="_blank" rel="noopener">Internet Security Research Group（ISRG）</a> 提供服务。</p><p>Let’s Encrypt 由 Mozilla、Cisco、Akamai、IdenTrust、EFF 等组织人员发起，主要的目的是为了推进网站从 HTTP 向 HTTPS 过度的进程，目前已经有越来越多的商家加入和赞助支持，其证书现在已经可以被所有主流的浏览器所信任。</p><h2 id="证书兼容性"><a href="#证书兼容性" class="headerlink" title="证书兼容性"></a>证书兼容性</h2><p>因 Let’s Encrypt 证书较新，下列 JDK/JRE 旧版本会不信任 Let’s Encrypt 证书<br>（查看 Java 版本：命令行输入 <em>java -version</em> ）：</p><ul><li>Java 7 &lt; 7u111</li><li>Java 8 &lt; 8u101</li></ul><p>而抛出以下异常：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException</span><br><span class="line">[... 以下输出省略 ...]</span><br></pre></td></tr></table></figure><p>详细兼容性问题参考：<a href="https://letsencrypt.org/docs/certificate-compatibility/" target="_blank" rel="noopener">https://letsencrypt.org/docs/certificate-compatibility/</a></p><h2 id="检查-Java-环境是否兼容-Let’s-Encrypt-证书"><a href="#检查-Java-环境是否兼容-Let’s-Encrypt-证书" class="headerlink" title="检查 Java 环境是否兼容 Let’s Encrypt 证书"></a>检查 Java 环境是否兼容 Let’s Encrypt 证书</h2><h3 id="自行编写程序测试"><a href="#自行编写程序测试" class="headerlink" title="自行编写程序测试"></a>自行编写程序测试</h3><p>自行编写测试程序查看 Java 环境是否支持 Let’s Encrypt 证书：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> URL(<span class="string">"https://helloworld.letsencrypt.org"</span>).openConnection().connect();</span><br></pre></td></tr></table></figure><p>然后查看是否抛出以下异常即可：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException</span><br><span class="line">[... 以下输出省略 ...]</span><br></pre></td></tr></table></figure><h3 id="使用-SSLPing-进行测试"><a href="#使用-SSLPing-进行测试" class="headerlink" title="使用 SSLPing 进行测试"></a>使用 SSLPing 进行测试</h3><p>如还没有测试程序，可以使用 ping 测试程序：SSLPing（可测试任何 SSL/TLS 端口，不仅是 HTTPS）。下面将使用预先编译的 SSLPing.jar 进行测试（阅读源码后自行编译也非常容易）：</p><p>在命令行输入以下内容以克隆 SSLPing 这个项目（请确保已安装 git）或点击链接下载 <a href="https://github.com/dimalinux/SSLPing/raw/master/dist/SSLPing.jar" target="_blank" rel="noopener">SSLPing.jar</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/dimalinux/SSLPing.git</span><br></pre></td></tr></table></figure><p>成功后进行测试：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar SSLPing/dist/SSLPing.jar helloworld.letsencrypt.org 443</span><br></pre></td></tr></table></figure><p>然后查看是否抛出以下异常即可：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">About to connect to <span class="string">'helloworld.letsencrypt.org'</span> on port <span class="number">443</span></span><br><span class="line">javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException</span><br><span class="line">[... 以下输出省略 ...]</span><br></pre></td></tr></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>出现这种证书不兼容的情况，只是因为 Let’s Encrypt 证书太新，Java 老版本未将其加入根证书导致。<br>具体解决办法有两种共三个：</p><ul><li>1.更新 Java update 版本<br>比如 JDK8_8u100，升级到 JDK8_8u101 及以上就可以了。但是搞 Java 的都是老学究，怕出现兼容问题，坚决不肯升级，所以不推荐。</li><li>2.自行将 Let’s Encrypt 证书加入信任<br>Chrome 浏览器打开一个使用 Let’s Encrypt 证书的网站：<a href="https://chengww.com">https://chengww.com</a>，可以看到一共有三个证书：<br><img src="https://upload-images.jianshu.io/upload_images/4971025-a0c75e7012e2dc32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="letsencrypt_certificate.png"></li></ul><p>现在关键是将哪个证书加入信任的问题。</p><p><img src="https://upload-images.jianshu.io/upload_images/4971025-0bbcdf633662b384.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="isrg-keys.png"></p><p>参考 Let’s Encrypt 官网 <a href="https://letsencrypt.org/certificates/" target="_blank" rel="noopener">Chain of Trust</a> 里面的这段说明：</p><blockquote><p>Our roots are kept safely offline. We issue end-entity certificates to subscribers from the intermediates in the next section.</p></blockquote><p>根证书 <a href="https://letsencrypt.org/certs/isrgrootx1.pem.txt" target="_blank" rel="noopener">ISRG Root X1 (self-signed)</a> 是离线安全保存的，在下一节中向中间人发放终端实体证书。</p><blockquote><p>IdenTrust has cross-signed our intermediates. This allows our end certificates to be accepted by all major browsers while we propagate our own root.</p></blockquote><blockquote><p>Under normal circumstances, certificates issued by Let’s Encrypt will come from “Let’s Encrypt Authority X3”. The other intermediate, “Let’s Encrypt Authority X4”, is reserved for disaster recovery and will only be used should we lose the ability to issue with “Let’s Encrypt Authority X3”. The X1 and X2 intermediates were our first generation of intermediates. We’ve replaced them with new intermediates that are more compatible with Windows XP.</p></blockquote><p>IdenTrust 和 Let’s Encrypt 中间证书已经交叉签名，故所有主流浏览器都接受 Let’s Encrypt 的结束证书。</p><p>正常情况下，Let’s Encrypt 颁发的证书将来自“Let’s Encrypt Authority X3”。另一个中间件“Let’s Encrypt Authority X4”保留用于灾难恢复，只有在Let’s Encrypt 失去发出“Let’s Encrypt Authority X3”的能力时才会使用。X1和X2中间体是Let’s Encrypt 的第一代中间体。Let’s Encrypt 用与Windows XP更兼容的新中间体替换它们。</p><p>也就是现在只有 <a href="https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt" target="_blank" rel="noopener">Let’s Encrypt Authority X3</a> 是正在签名用的。将其加入信任即可。</p><p>参考解决方法（任选其一）：</p><h3 id="往-JRE-中导入-Let’s-Encrypt-证书（无需修改代码，推荐）"><a href="#往-JRE-中导入-Let’s-Encrypt-证书（无需修改代码，推荐）" class="headerlink" title="往 JRE 中导入 Let’s Encrypt 证书（无需修改代码，推荐）"></a>往 JRE 中导入 Let’s Encrypt 证书（无需修改代码，推荐）</h3><p>可以将 Let’s Encrypt 证书加入 JRE 的信任证书，这种方式无需修改代码，简单快捷，推荐使用。</p><h4 id="操作系统为-Mac-OS-X-或-Linux"><a href="#操作系统为-Mac-OS-X-或-Linux" class="headerlink" title="操作系统为 Mac OS X 或 Linux"></a>操作系统为 Mac OS X 或 Linux</h4><ul><li>检查 <strong>JAVA_HOME</strong> 已经正确配置</li></ul><p>在终端上输入以下内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $JAVA_HOME</span><br></pre></td></tr></table></figure><p>出现以下类似回应即为正确配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/</span><br></pre></td></tr></table></figure><p>如未配置请自行搜索配置 Java 环境变量即可。</p><ul><li>下载 Let’s Encrypt 中间证书</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem</span><br></pre></td></tr></table></figure><p>或直接复制上述链接下载即可</p><ul><li>导入证书</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keytool -trustcacerts -keystore &quot;$JAVA_HOME/jre/lib/security/cacerts&quot; -storepass changeit -noprompt -importcert -alias lets-encrypt-x3-cross-signed -file &quot;lets-encrypt-x3-cross-signed.pem&quot;</span><br></pre></td></tr></table></figure><p>出现</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Certificate was added to keystore</span><br></pre></td></tr></table></figure><p>即可</p><p><strong>（注：当出现 java.io.FileNotFoundException… 时可能要检查相关文件路径是否正确）</strong></p><h4 id="操作系统为-Windows"><a href="#操作系统为-Windows" class="headerlink" title="操作系统为 Windows"></a>操作系统为 Windows</h4><ul><li>检查 <strong>JAVA_HOME</strong> 已经正确配置</li></ul><p>在命令行上输入以下内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo %JAVA_HOME%</span><br></pre></td></tr></table></figure><p>出现以下类似回应即为正确配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Program Files (x86)\Java\jdk1.8.0_92</span><br></pre></td></tr></table></figure><p>如未配置请自行搜索配置 Java 环境变量即可。</p><ul><li>下载 Let’s Encrypt 中间证书</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem</span><br></pre></td></tr></table></figure><p>或直接复制上述链接下载即可</p><ul><li>导入证书</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd %JAVA_HOME%\bin</span><br><span class="line">keytool -trustcacerts -keystore &quot;%JAVA_HOME%\jre\lib\security\cacerts&quot; -storepass changeit -noprompt -importcert -alias lets-encrypt-x3-cross-signed -file &quot;lets-encrypt-x3-cross-signed.pem&quot;</span><br></pre></td></tr></table></figure><p>出现</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Certificate was added to keystore </span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">即可</span><br><span class="line"></span><br><span class="line">**（注：当出现 java.io.FileNotFoundException... 时可能要检查相关文件路径是否正确）**</span><br><span class="line"></span><br><span class="line">该方法至此已经完成，请检测是否成功。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### 程序运行时添加 Let&apos;s Encrypt 证书为信任证书</span><br><span class="line">也可以在程序初始化或网络初始化时将 Let&apos;s Encrypt 证书添加进信任证书。</span><br><span class="line"></span><br><span class="line">使用火狐浏览器访问 [https://helloworld.letsencrypt.org](https://helloworld.letsencrypt.org) ，然后将 **Let&apos;s Encrypt Authority X3** 导出为 **.cer** 文件，或点击下载 [Let&apos;s Encrypt Authority X3.cer](https://lets-encrypt.pek3a.qingstor.com/Let&apos;s%20Encrypt%20Authority%20X3.cer)</span><br><span class="line"></span><br><span class="line">将文件地址替换下述文件地址中： **&quot;Let&apos;s Encrypt Authority X3.cer&quot;**</span><br><span class="line"></span><br><span class="line">具体请参考以下示例添加:</span><br><span class="line"></span><br><span class="line">```Java</span><br><span class="line">/**</span><br><span class="line"> * Created by chengww on 2018/9/18.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.net.URLConnection;</span><br><span class="line"></span><br><span class="line">import javax.net.ssl.SSLHandshakeException;</span><br><span class="line"></span><br><span class="line">public class SSLExample &#123;</span><br><span class="line"></span><br><span class="line">    private static void initTrustManager() &#123;</span><br><span class="line">        // Enter the path of the file named &apos;Let&apos;s Encrypt Authority X3.cer&apos;</span><br><span class="line">        System.setProperty(&quot;javax.net.ssl.trustStore&quot;, &quot;Let&apos;s Encrypt Authority X3.cer&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        initTrustManager();</span><br><span class="line">        </span><br><span class="line">        // signed by default trusted CAs.</span><br><span class="line">        testUrl(new URL(&quot;https://www.thawte.com&quot;));</span><br><span class="line"></span><br><span class="line">        // signed by letsencrypt</span><br><span class="line">        testUrl(new URL(&quot;https://helloworld.letsencrypt.org&quot;));</span><br><span class="line">        // signed by LE&apos;s cross-sign CA</span><br><span class="line">        testUrl(new URL(&quot;https://letsencrypt.org&quot;));</span><br><span class="line">        // qingstorage</span><br><span class="line">        testUrl(new URL(&quot;https://stor.qingstorage.com&quot;));</span><br><span class="line">        // qingcloud</span><br><span class="line">        testUrl(new URL(&quot;https://www.qingcloud.com/&quot;));</span><br><span class="line">        // self-signed</span><br><span class="line">        testUrl(new URL(&quot;https://www.pcwebshop.co.uk/&quot;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static void testUrl(URL url) throws IOException &#123;</span><br><span class="line">        URLConnection connection = url.openConnection();</span><br><span class="line">        try &#123;</span><br><span class="line">            connection.connect();</span><br><span class="line">            System.out.println(&quot;Headers of &quot; + url + &quot; =&gt; &quot;</span><br><span class="line">                    + connection.getHeaderFields());</span><br><span class="line">        &#125; catch (SSLHandshakeException e) &#123;</span><br><span class="line">            System.out.println(&quot;Untrusted: &quot; + url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法至此已经完成，请检测是否成功。</p><hr><h3 id="升级-JDK-JRE-版本"><a href="#升级-JDK-JRE-版本" class="headerlink" title="升级 JDK/JRE 版本"></a>升级 JDK/JRE 版本</h3><p>可以直接升级的 JDK/JRE update 版本，7u111 及 8u101 之后已将 Let’s Encrypt 证书加入信任。</p><p>前往 <a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a> 下拉到最后一项 Java Archive，点击 <strong>DOWNLOAD</strong></p><p><img src="https://lets-encrypt.pek3a.qingstor.com/screenShots/Java_Archive.png" alt="Java_Archive.png"></p><p>选择 Accept License Agreement，下载对应的 JDK/JRE 版本后安装即可</p><p><img src="https://lets-encrypt.pek3a.qingstor.com/screenShots/Accept_License_Agreement.png" alt="Accept_License_Agreement.png"></p><p>该方法至此已经完成，请检测是否成功。</p><hr><h2 id="检查是否成功"><a href="#检查是否成功" class="headerlink" title="检查是否成功"></a>检查是否成功</h2><p>重复操作上述 <strong>检查 Java 环境是否兼容 Let’s Encrypt 证书</strong> 的内容即可。</p><hr><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Let’s Encrypt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VCD--国产专利之痛</title>
      <link href="/archives/VCD-Chinese_patent_pain.html"/>
      <url>/archives/VCD-Chinese_patent_pain.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Mar 26 2019 17:59:28 GMT+0800 (China Standard Time) --><p>世界上第一台家用VCD机，影音光碟（Video Compact Disc；VCD）诞生于中国合肥的”万燕”之手，”万燕”让中国的老百姓认识了VCD，并开创了中国的VCD行业。</p><p>VCD在二十世纪末消费类电子领域里，是中国可能领先的唯一机会，而在此之前本领域没有一个中国人创造并形成产业。但是当时万燕集团的掌门人、也是VCD机研制者姜万勐先生犯下令他后悔终生的致命错误：他竟然认为在当时的情况，申不申请专利没有太大的意义，以致万燕推出的第一批1000台VCD机，几乎都被国内外家电公司买去做了样机，成为解剖的对象。</p><p>随后，索尼、松下、飞利浦等国外制造业巨大纷纷加强对VCD机的研究，推出新的专利技术，刷新VCD的技术标准，以致包括万燕集团在内的国内家电企业生产VCD需要向这些国外巨头缴纳巨额的专利费用，在之后的七八年时间里，这些专利费用在国内市场就累积上百亿之多。</p><p>仅仅3到4年时间，拥有这项领先技术的万燕却最终淹没于同行业的激烈竞争中。而VCD产业，随着进入者的增多，产品利润被不断摊薄，最后这项没什么技术含量的产业，也在低价竞争中日薄西山，被DVD蚕食殆尽。</p><a id="more"></a><h3 id="VCD的前世今生"><a href="#VCD的前世今生" class="headerlink" title="VCD的前世今生"></a>VCD的前世今生</h3><h4 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h4><p>世界上第一台VCD视盘机是由国人姜万勐先生发明的，诞生于安徽万燕公司。<br>事情发生在1992年。在美国举办的国际广播电视技术展览会上。美国C-CUBE（斯高柏）公司曾展出了一项图像解压缩技术。时任安徽观代集团总经理的姜万勐先生受其启发， 敏锐地意识到：可以把图像和声音存储在一张比较小的光盘里的MPEG技术，意味着可以创造出一种物美价廉的视听产品，供老百姓在家中使用。于是在1993年，出资57万元，研制出了物美价廉的VCD（价格相比同期录像机很有优势）。同年12月，他又与美籍华人孙燕生（时任C-CUBE公司董事长）共同投资1700万美元成立了万燕公司，各取了姜万勐、孙燕生名字中的一个字作为公司名称：<strong>安徽省万燕电子系统有限公司</strong>。</p><p>但是令人匪夷所思的是，VCD真正的核心技术：万燕公司花费巨资委托C-CUBE研发的解码芯片技术，却牢牢掌握在C-CUBE斯高柏微系统公司手里。这为后来国产VCD乱局埋下了崩溃的种子。</p><h4 id="万燕的危机"><a href="#万燕的危机" class="headerlink" title="万燕的危机"></a>万燕的危机</h4><p>在1993年安徽现代电视技术研究所的VCD可行性报告中，有这样的一段描述：</p><blockquote><p>这是本世纪末消费类电子领域里，中国可能领先的惟一机会。</p></blockquote><p>为此，姜万勐进行了一系列的市场调查，得到了一系列的数字：1993年中国市场上组合音响的销售量是142万台，录像机的销售量是170余万台，LD影碟机100万台，CD激光唱机是160余万台。当时的LD光盘是四五百元一张，而VCD机的光盘价格却只有它的10％左右，因此可以预测，VCD机每年的销售量将会达到200万台左右。</p><h5 id="第一批VCD"><a href="#第一批VCD" class="headerlink" title="第一批VCD"></a>第一批VCD</h5><p>中国的老百姓到了1994年底才逐渐认识VCD。在这一年，万燕生产了几万台VCD机。不仅如此，姜万勐还要开发碟片，总不能让老百姓买了枪而没子弹。为此，他又向11家音像出版社购买了版权，推出了97种卡拉OK碟片。在最初成立不到一年的时间里，“万燕”倾其所有，开创了一个市场，确立了一个响当当的品牌，并形成了一整套成型的技术，独霸于VCD天下。<br>可以说，万燕的初创是成功的，也是辉煌的。但是，万燕也给自己酿下一杯苦酒。令姜万勐感到伤心的是，万燕推出的第一批1000台VCD机，几乎都被国内外各家电公司买去做了样机，成为解剖的对象。<br>1994年，万燕开始批量生产VCD，但初期由于片源不配套，使VCD在市场发展上停滞了很长的一段时间。</p><p>万燕所面临的难题是软硬件要一齐开发。“万燕”在前期研究开发的投入是1600万美元，广告投入是2000万元人民币，中国百姓到了1994年底才逐渐认识VCD，而在这一年，“万燕”生产了几万台VCD，结果只卖出了2万台。由于前期投入太多，导致早期产品成本高达每台360美元，再加广告费用，在市场上每台VCD卖四五千元，却基本无利可赚。 不仅如此，万燕还要开发碟片，万燕为此又向11家音像出版社购买版权，推出97种卡拉OK碟片。</p><p>投入上亿地研发资金，产品研发出来，却没有及时申请专利，进行技术垄断。其他制造商只需要花费极小的代价就能获得成套的成熟生产技术。<br>在前期的产品成本上，万燕公司就吃了大亏；接下来的败招是九四年就投入2000万的广告费用。</p><p>一直到九五年。影碟机市场还属于培育阶段，在盗版影碟大量涌现之前，影碟机的市场容量很有限。投入再多地广告费都不会起到预期地效果。<br>广告是需要连续进行投入的商业行为，一旦中断，广告就会随着时间地延长而变得毫无效果。<br>要是将2000万广告预算拖到95下半年再投入，或许能让万燕公司起死回生。<br>万燕前期投入上亿的研究资金、2000万的广告费用，迄今为止卖出去地台影碟机还没超过两万台，就算每台影碟机的售价高达四千元，万燕收回成本都困难，更不要说什么利润了。<br>万燕资金裢脱节了！<br>万燕公司在影碟机市场启动的前夜就花光了所有钱，陷入生存的危机之中。</p><p>万燕要打翻身仗，唯有继续筹集资金扩大产能，等到九五、九六年影碟机市场突然暴发的时候，利用先机大举抢占市场。<br>万燕会成功的筹集到资金吗？显然不会，不然万燕就不会是被遗忘的品牌了。<br>在盗版影碟大量出现之前，影碟机的惨淡市场、万燕的惨淡经营已经让投资人失出信心。最重要的一点就是引入影碟机整套的生产技术甚至不需要一百万的资金，然而投资万燕却要分摊万燕公司前期投入研发的上亿元成本，哪个投资人会傻到做这折本的买卖？</p><h5 id="市场蜂拥，万燕沉没"><a href="#市场蜂拥，万燕沉没" class="headerlink" title="市场蜂拥，万燕沉没"></a>市场蜂拥，万燕沉没</h5><p>1996年开始到1997年，中国的VCD市场每年以数倍的速度增长。从1995年的60万台猛增至1996年600多万台，1997年销售达到1000万台。只用了短短5年，VCD影碟机累计销售已有5000万台，并催生了爱多、步步高、新科等国内响当当的品牌。但 “万燕”却在这个产业中，从“先驱”成为“先烈”，其市场份额从100％跌到2％，也就在这一年，“万燕”被同省的美菱集团重组，成为美菱万燕公司。<br>“万燕”让中国百姓认识了VCD，但摘桃子的却是深谙市场秘诀的广东人。 此时，深谙市场秘诀的广东人却恰到好处地把握了这个良机。由于VCD整机组装对技术要求不高，没有生产许可证的限制，再加上市场已经被打开，广东又是散件水货的聚集地，几个因素凑到一起，VCD组装厂如雨后春笋般出现在了珠江三角洲。“床板工厂”开始遍布大街小巷，一个人一天可以组装10台、20台，一家老少一天就能装出几十台，市场颇为火爆。<br>在中国家电产品中，没有一种产品如VCD 般以狂飙突进的方式席卷全国。“万燕”从市场上衰落后，VCD进入了爆炸式的增长时期，有关统计显示，中国VCD企业最多的时候达1000多家，整个VCD行业风云变幻,其铺天盖地的广告攻势，高开低走的价格走势，大起大落的市场命运，无不让人刻骨铭心。</p><p>待续…</p><p>中国VCD发展历程</p><ul><li>1993年9月，留美学者姜万勐、孙燕生生产出世界上第一台VCD。</li><li>1996年至1997年，爱多、新科等新品牌开始大规模进入市场，并占据VCD大部分市场。</li><li>1998年9月，发生了全国性的SVCD与CVD标准之争论。1998年8月，信息产业部制定《超级VCD系统行业规范》，于1998年11月1日生效。</li><li>1998年10月至1999年7月，各大影碟机厂家不断推出附加新技术的VCD产品，如可播放MP3和MIDI的超级VCD，掌上型超级VCD和可录写的超级VCD。甚至实现了VCD联网和语音复读等功能，以实现中小学的VCD辅助教学。</li><li>1999年1月，影碟机行业广告费投入直线下降。在激烈竞争中，不少知名企业陷入困境，如“小霸王”倒闭和“爱多”亏损严重。</li><li>1999年7月，各主要生产厂家不约而同地开始大规模降价，普通单碟机的价格纷纷跌破800元/台。DVD产品开始取代VCD。</li></ul><p>本文综合以下文章整理：</p><ul><li>万燕VCD的衰败之路(20110629)<br><a href="https://wenku.baidu.com/view/d203a14469eae009581bec16.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/d203a14469eae009581bec16.html</a></li><li>万燕VCD的悲剧<br><a href="http://www.360doc.com/content/16/0512/15/14771698_558528759.shtml" target="_blank" rel="noopener">http://www.360doc.com/content/16/0512/15/14771698_558528759.shtml</a></li><li>中国VCD行业案例分析<br><a href="https://wenku.baidu.com/view/69283f040740be1e650e9a2a.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/69283f040740be1e650e9a2a.html</a></li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 科技随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VCD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写给产品经理之前端是如何展示后端数据的</title>
      <link href="/archives/How_does_the_front_end_display_the_back-end_data.html"/>
      <url>/archives/How_does_the_front_end_display_the_back-end_data.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Mar 26 2019 17:59:28 GMT+0800 (China Standard Time) --><p>移动互联网的迅猛发展让移动APP呈现出爆发之势，这两年更是移动开发程序员的春天。</p><p><img src="https://js-cdn.pek3b.qingstor.com/pic/get_your_shit_together.png" alt=""></p><p>今天的互联网上充斥着产品与技术的撕逼。也许你会问产品经理到底要不要懂技术？由此引申出，产品经理到底要不要懂设计？产品经理到底要不要懂运营？产品经理到底要不要懂市场？产品经理到底要不要懂业务？这所有问题的来源都是大家对于产品经理的工作认识不一致。</p><a id="more"></a><p><strong>每个人心中都有一个产品经理的定义，产品经理在技术方面更多的是去统筹和规划。不是画画图写写文档就可以了。这里面更多的需要的是对逻辑的梳理和拆分。</strong><br>例如很简单的一个app内嵌发红包的活动，产品经理需要确定整个活动的流程。从用户进入页面的那一瞬间就应该被产品经理掌控。他的每一个步骤，每一个操作会带来什么结果，有哪些变量会导致活动进程失败，这些都要产品去考虑。等到活动逻辑和过程全部梳理完成，下面就要进行拆分了。还是以发红包为例，红包中金额是客户端写死还是服务端进行计算，红包领取资格需要服务端返回几种结果，每种结果对应客户端的提示是什么，用户领取红包以后服务端需要记录那些信息（帐号，uid，领取时间，金额，是否使用等），客户端哪些地方需要加入计数器进行数据统计。总结起来其实就是，产品经理需要根据开发的每一个环节，将所有内容分类整理，并分发给不同部分的开发进行研发。最后，还需要给测试准备好check list，当测试按照check list测试完成以后，才可以上线。</p><p>以上种种都需要产品对前端如何显示后端数据有一个清晰的认识才能规划好数据如何展示。是APP写死呢还是后台返回，在用户任务进行的时候有哪些可能case。只有搞清楚这些，产品才能在实际的开发中掌握好整个项目的流程与进展，才能不被开发给糊弄。</p><h3 id="1-前后端到底在干些什么"><a href="#1-前后端到底在干些什么" class="headerlink" title="1.前后端到底在干些什么"></a>1.前后端到底在干些什么</h3><p>简单的说，前端仅仅将后端返回的数据展示在页面上，不做过多的逻辑处理。前端需要关心的是，数据如何更好的展示出来，页面效果如何做出来，以及其性能问题。<br>而后端就是负责对这些数据进行处理，提供给前端展示。</p><p>前端一般有H5、android、ios等多端界面。数据不要轻易写死在前端里面，不然到时候三端都要修改，费时费力。而将这些变化多数据让后端进行处理，前端将这个数据取出来显示出来就行了。</p><p>举个例子吧，下图是一个美团app首页团购的展示效果<br><img src="http://upload-images.jianshu.io/upload_images/4971025-0ab79486f1558e3c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="美团"></p><p>上方美食等8个icon一般为固定展示栏目，非特殊情况不会修改。那么前端一般是写死在app中，等到需要更新的时候更新app即可。</p><p>而下方猜你喜欢是一个列表，该列表数据经常变化，数据写在服务端维护，app取出数据进行展示即可。</p><h3 id="2-前端到底是怎么显示数据的"><a href="#2-前端到底是怎么显示数据的" class="headerlink" title="2.前端到底是怎么显示数据的"></a>2.前端到底是怎么显示数据的</h3><p>首先，前段对页面的展示是分两步走的。<br>第一、在本地绘制好界面，当然此时未连api会填充一些假数据，或写一些默认值。<br>第二、连api进行数据获取，将数据填充进界面。</p><p>既然如此，咱们简单看下前端拿到的数据到底长什么样的吧。<br>现在前端获取到的数据基本是json数据。</p><ul><li>何谓json数据<br>JSON是一种传递对象的语法，对象可以是name/value对，数组和其他对象。<br>拿刚才美团截图里面的猜你喜欢列表简单说下吧，如下面这一坨东西就是后端可能返回给前端的数据<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;list&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;title&quot;: &quot;合辑护甲&quot;,</span><br><span class="line">            &quot;content&quot;: &quot;【北京市】奥斯卡货到付款...&quot;</span><br><span class="line">            &quot;price&quot;: 12.9</span><br><span class="line">            &quot;distance&quot;: &quot;145.0km&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;title&quot;: &quot;合辑护甲&quot;,</span><br><span class="line">            &quot;content&quot;: &quot;【北京市】奥斯卡货到付款...&quot;</span><br><span class="line">            &quot;price&quot;: 12.9</span><br><span class="line">            &quot;distance&quot;: &quot;145.0km&quot;</span><br><span class="line">        &#125;</span><br><span class="line">     ]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><p>不需要特别懂里面每一个的含义，只需要知道，前端通过”title”这个键名(key)就可以拿到”合辑护甲”这个值(value)。<code>&quot;title&quot;: &quot;合辑护甲&quot;</code> 这一整个就是俗称的一个字段。通过该字段前端就可以获取到列表的标题了。当然这个列表只是简单的展示用，还有诸如图片地址、优惠信息、已售份额等信息没有提供，这就是缺少字段的情况。<br>前后端就是通过这样的一个定义获取/传递数据的。</p><h3 id="3-什么样的数据该由前端来控制，什么样的数据该由后端提供呢"><a href="#3-什么样的数据该由前端来控制，什么样的数据该由后端提供呢" class="headerlink" title="3.什么样的数据该由前端来控制，什么样的数据该由后端提供呢"></a>3.什么样的数据该由前端来控制，什么样的数据该由后端提供呢</h3><p>考虑到后期拓展、需求变更等，一般来说，涉及到计算的、可能有变动的，一律不要让前端来弄。<br>还是刚才那个例子，在刚才那个列表中有一个“立减5元”的橙黄色tag。<br>这个tag信息，如果考虑不充分，比如说，后端只提供一个数字5，然后前端在其页面写死“立减x元”，x为填入后端提供的数字，颜色固定为橙黄色。这个如果需求不修改还好，如果后期需要新增一个“满20减5元”的红色tag不傻眼了吗？<br>到时候只能通过升级app来解决，而且不升级的老用户将永远看不到这个红色的tag。<br>所以说，考虑到程序的可复用和拓展性，需要产品将后期可能新增或变更的需求考虑好，和前后端进行沟通，让前后端设计好实现，尽量降低程序的耦合和硬编码。这才能使一个产品更加健壮以及让苦逼的程序猿少加班的关键。</p><p>那么刚才那个tag的需求如何设计才合理呢？<br>首先是tag显示文字，全权由后端提供，可以是多个字段，由前端进行拼接。然后是tag的颜色，提供几种样式让前端判断是一种可行的办法，但是直接提供tag的色值给前端的这种方式无疑给前端展示增加了无限的可能。<br>是不是也要增加一个tag形状的字段呢？<br>俗话说，过犹不及。tag形状这种东西真的很少变更，字段太多无疑会增加开发的时间成本，而且会让人有一种舍本逐末之感。</p><h3 id="4-前端数据刷新时机问题"><a href="#4-前端数据刷新时机问题" class="headerlink" title="4.前端数据刷新时机问题"></a>4.前端数据刷新时机问题</h3><p>前端获取到后端数据后，如果前端不主动刷新重新请求数据的话，这个页面的数据在该页面销毁前会一直保持不变。</p><p>如何理解？<br>首先，第一次进入一个页面，该页面数据为空或默认数据。此时前端会链接api请求数据。数据请求完成后，填充进页面。那么本次联网请求就完成了，在前端不进行二次数据请求之前，该页面会一直保持本次请求的数据。也就是说，就算服务端修改了数据，前端此时是不能事实的进行更新的，因为我前端不知道你数据更新了。</p><p>那么在这个需要实时更新页面数据的时候和前端讲这种需求会被前端直接回绝：“做不了”。这个时候产品咋办，怪怪妥协？最后背锅的还是自己，而且自己也不知道是真做不了还是假做不了。</p><p>实时刷新也不是不能做，只是做的成本略高，需要和后端进行配合，像微信聊天一样和后端进行长连接(socket)，这样服务端数据变更前端就知道数据变更了。<br>当然如果稍懂页面刷新机制的话，可以要求前端在适当的时机进行页面刷新，如在页面可见的时候进行刷新，这样用户每次看到的都是最新的数据。也可以让用户主动刷新，如新增刷新功能。</p><h3 id="5-One-more-thing"><a href="#5-One-more-thing" class="headerlink" title="5.One more thing"></a>5.One more thing</h3><p>产品懂技术这件事情，不仅会降低和开发同学沟通时的难度和被歧视风险，还会提升在面对开发同学意见时的判断力，会降低被技术团队忽悠的几率。同时，在需要向上级解释技术原因导致变更的情况下，也会有助于说服老板。<br>“闻道有先后，术业有专攻”，要相信自己所接触的开发团队是专业的，靠谱的，相信开发团队为实现需求所做出的技术方案是合理的，最优的。如果有质疑，可以加深沟通，以合适的方式提出自己的质疑。这里要补充一句的是，这个信任过程是需要建立的，也是会根据团队的表现不断变化的；同理，其实团队对于产品经理的信任度也是一样的情况。<br>吐槽是没有意义的，关键还是要解决问题。如果觉得产品经理不靠谱，那么有没有进行过深入的沟通？如果觉得开发不好沟通，那么有没有进行过了解，不好沟通的原因在哪里？如果当事人本身确实不可沟通，那么有没有考虑和对方的老板沟通，或者通过自己的老板如实反映情况？吐槽是最容易的，解决问题反而会很难。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 给产品经理讲技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 给产品经理讲技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用JAVA合并哔哩哔哩手机客户端下载的视频</title>
      <link href="/archives/Java_merge_videos_of_bilibili.html"/>
      <url>/archives/Java_merge_videos_of_bilibili.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Mar 26 2019 17:59:28 GMT+0800 (China Standard Time) --><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>使用哔哩哔哩手机客户端下载的视频在电脑上播放，无奈视频是分段的，每次都只好手动的合并再播放。而且客户端下载的视频不会按网页文件名命名，而是以av号–全数字命名。最可怕的是，每次打开一集的时候，进入的目录层级得吓死人。</p><p><img src="https://upload-images.jianshu.io/upload_images/4971025-6adc8d71eced2d05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="视频层级"></p><p>最最可怕的是，新版客户端默认文件后缀是 <em>.blv</em> 。难道我们要一个一个重命名然后再合并吗？<br>NO！这种重复的事情交给计算机就好了。</p><p>自己动手丰衣足食，我们就动手写个JAVA版的哔哩哔哩视频合并小程序。</p><p>完整项目地址: <a href="http://git.oschina.net/chengww5217/BiliBiliMerge" target="_blank" rel="noopener">http://git.oschina.net/chengww5217/BiliBiliMerge</a><br>直接下载使用:<br><a href="http://git.oschina.net/chengww5217/BiliBiliMerge/raw/master/run/BilibiliMeroV1.2.7z" target="_blank" rel="noopener">http://git.oschina.net/chengww5217/BiliBiliMerge/raw/master/run/BilibiliMeroV1.2.7z</a><br>使用帮助:<br><a href="http://git.oschina.net/chengww5217/BiliBiliMerge/blob/master/README.md" target="_blank" rel="noopener">http://git.oschina.net/chengww5217/BiliBiliMerge/blob/master/README.md</a></p><a id="more"></a><h4 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h4><ul><li>1.自动识别文件夹下视频文件并进行合并</li><li>2.合并后以视频播放页视频名称+视频分 P 名称命名<br><em>F:(日剧)夺爱之冬\第一话.flv</em></li><li>3.合并完成删除源文件</li></ul><h4 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h4><ul><li>1.得到哔哩哔哩客户端下载的视频目录</li></ul><p>将哔哩哔哩手机客户端下载的视频移出手机的 Android 目录，如移动到根目录<br>因 Android MTP 限制，电脑无法访问 Android 目录。此目录是 Android 应用缓存目录。<br>视频位于 <em>Android–data–tv.danmaku.bili(最下面)–download</em> 下。如图显示的数字目录即为需求目录。请将数字目录移出Android目录外。</p><p><img src="https://upload-images.jianshu.io/upload_images/4971025-e232fc2c4e9b227f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>手机连上电脑后，将上述数字目录复制或移动到电脑。</p><ul><li>2.分析视频目录结构</li></ul><p><em>8896746\1\entry.json</em> 这个json包含了整个播放目录的名称和每一P的名称<br><em>8896746\1\lua.flv.bili2api.3.blv</em> 这个文件夹就是各分段视频文件了。<br>注意：视频文件命名逻辑是：<em>0.blv,1.blv…9.blv,10.blv…</em><br>也就是说，一旦视频文件超过 10 个，如 0-10，合并的时候会出现这样的合并顺序：<em>0.blv–1.blv–10.blv–2.blv…</em> 所以说，我们需要先把 <em>0.blv-9.blv</em> 重命名为 <em>00.blv-09.blv</em></p><ul><li>3.FLV科普</li></ul><blockquote><p>FLV是一个二进制文件，由文件头（FLV header）和很多tag组成。tag又可以分成三类：audio,video,script，分别代表音频流，视频流，脚本流（关键字或者文件信息之类）。<br>FLV文件=FLV头文件+ tag1+tag内容1 + tag2+tag内容2 + …+… + tagN+tag内容N。</p></blockquote><p>也就是说合并FLV分段视频的时候不能简单粗暴的将多个flv视频片段按字节流的方式写到一个文件中。<br>这时候来看FLV合并的原理：</p><blockquote><p>（1） flv 文件由1个header和若干个tag组成；<br>（2） header记录了视频的元数据；<br>（3） tag 是有时间戳的数据；<br>（4） flv合并的原理就是把多个文件里的tag组装起来，调整各tag的时间戳。<br>（5）判断是否为第一个文件，是则安装头部。</p></blockquote><ul><li>了解了这些就可以动手撰写我们的合并程序了。Let’s go.</li></ul><h4 id="流程逻辑"><a href="#流程逻辑" class="headerlink" title="流程逻辑"></a>流程逻辑</h4><ul><li><p>提示输入哔哩哔哩下载的视频文件夹(输入文件夹)，输入输出的文件夹。<br>因最后合并完成后要删除源文件，故要求输出文件夹不能和输入文件夹相同。<br>一次输入多个输入文件夹以英文逗号隔开。</p></li><li><p>然后进入输入文件夹下– <em>entry.json</em> 得到视频名称，和输入文件夹拼接创建目录。<br>如：输出到 <em>F:\视频名称</em> 文件夹</p></li><li><p>执行合并<br>listFiles()执行两次进入到这个文件夹</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4971025-bdde624877eee9f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>entry.json 得到视频每一P的名称，拼接输出如 <em>F:\视频名称\第一话.flv</em><br>判断进入 <em>lua.flv.bili2api.3</em> 文件夹即可得到所有视频文件<br>判断对 <em>0.flv-9.flv</em> 进行重命名—&gt; <em>00.flv-09.flv</em><br>进行合并操作</p><ul><li>删除源文件</li></ul><h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><ul><li>1.首先eclipse建项目<br>包结构很简单</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4971025-937658844f30c2e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="包结构"></p><ul><li>2.输入输出文件夹<br>包含main方法的Bilibili.java<br>输入输出文件夹</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      File out;</span><br><span class="line">File[] in = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">boolean</span> isBreak = <span class="keyword">true</span>;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String line = scanner.nextLine();</span><br><span class="line"><span class="keyword">if</span>(line == <span class="keyword">null</span> || line.length() == <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"输入不为空，请重试："</span>);</span><br><span class="line">isBreak = <span class="keyword">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">String[] lines = line.split(<span class="string">","</span>);</span><br><span class="line">in = <span class="keyword">new</span> File[lines.length];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; lines.length;i++)&#123;</span><br><span class="line">in[i] = <span class="keyword">new</span> File(lines[i]);</span><br><span class="line"><span class="keyword">if</span>(!in[i].exists())&#123;</span><br><span class="line">System.out.println(in[i].getAbsolutePath() + <span class="string">"文件夹不存在，请重试："</span>);</span><br><span class="line">isBreak = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isBreak)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"请输入输出路径："</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String line = scanner.nextLine();</span><br><span class="line">out = <span class="keyword">new</span> File(line);</span><br><span class="line"><span class="keyword">if</span>(!out.exists())&#123;</span><br><span class="line">System.out.println(<span class="string">"文件夹不存在，请重试："</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> isEquals = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; in.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(out.getAbsolutePath().equals(in[i].getAbsolutePath()))&#123;</span><br><span class="line">isEquals = <span class="keyword">false</span>;</span><br><span class="line">System.out.println(<span class="string">"输出路径和某个输入路径相同，请重试："</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isEquals)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3.循环读取多个输入目录的视频名称</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; in.length;i++)&#123;</span><br><span class="line"><span class="comment">//得到播放文件名，如"(日剧)夺爱之冬"</span></span><br><span class="line">String path = in[i].getAbsolutePath() +separator+ <span class="string">"1"</span>+separator+<span class="string">"entry.json"</span>;</span><br><span class="line">String line = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BufferedReader reader =  </span><br><span class="line">                <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(path), Charset.forName(<span class="string">"utf-8"</span>))); </span><br><span class="line">line = reader.readLine();</span><br><span class="line">reader.close();</span><br><span class="line">System.out.println(<span class="string">"json="</span>+line);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出路径</span></span><br><span class="line">String[] names = tool.json_getName(line);</span><br><span class="line">String episode_path = out.getAbsolutePath() + separator + names[<span class="number">0</span>];</span><br><span class="line">File episode = <span class="keyword">new</span> File(episode_path);</span><br><span class="line"><span class="keyword">if</span>(!episode.exists())&#123;</span><br><span class="line">episode.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"输出："</span>+episode_path);</span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line">tool.doMerge(in[i], episode_path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>4.判断对 <em>0.flv-9.flv</em> 进行重命名—&gt; <em>00.flv-09.flv</em> 后合并</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void doMerge(File in,String episode_path)&#123;</span><br><span class="line">//1、2、3、4...</span><br><span class="line">File[] files = in.listFiles();</span><br><span class="line"></span><br><span class="line">//循环</span><br><span class="line">for(File f : files)&#123;</span><br><span class="line">//文件名，如第一话</span><br><span class="line">String name = null;</span><br><span class="line">//获得所有名为.blv的文件</span><br><span class="line">File[] ffs = null;</span><br><span class="line">File[] fs = f.listFiles();</span><br><span class="line">for(final File ff : fs)&#123;</span><br><span class="line">if(ff.getName().equals(&quot;entry.json&quot;))&#123;</span><br><span class="line">String json_name = null;</span><br><span class="line">try &#123;</span><br><span class="line">BufferedReader reader =  </span><br><span class="line">              new BufferedReader(new InputStreamReader(new FileInputStream(ff), Charset.forName(&quot;utf-8&quot;)));</span><br><span class="line">json_name = reader.readLine();</span><br><span class="line">reader.close();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">name = json_getName(json_name)[1];</span><br><span class="line">&#125;</span><br><span class="line">if(ff.isDirectory() &amp;&amp; ff.getName().startsWith(&quot;lua.&quot;))&#123;</span><br><span class="line">//重命名</span><br><span class="line">for(int i = 0; i &lt; ff.list().length;i++)&#123;</span><br><span class="line">File pathname = ff.listFiles()[i];</span><br><span class="line">//0.blv -- 00.blv</span><br><span class="line">if(pathname.getName().endsWith(&quot;.blv&quot;) &amp;&amp; pathname.getName().length() == 5)&#123;</span><br><span class="line">pathname.renameTo(new File(pathname.getParentFile().getAbsolutePath() + File.separator + &quot;0&quot; + i + &quot;.blv&quot;));</span><br><span class="line">&#125;</span><br><span class="line">if(pathname.getName().endsWith(&quot;.flv&quot;) &amp;&amp; pathname.getName().length() == 5)&#123;</span><br><span class="line">pathname.renameTo(new File(pathname.getParentFile().getAbsolutePath() + File.separator + &quot;0&quot; + i + &quot;.flv&quot;));</span><br><span class="line">&#125;</span><br><span class="line">//0.blv.bdl -- 00.blv.bdl</span><br><span class="line">if(pathname.getName().endsWith(&quot;.blv.bdl&quot;) &amp;&amp; pathname.getName().length() == 9)&#123;</span><br><span class="line">pathname.renameTo(new File(pathname.getParentFile().getAbsolutePath() + File.separator + &quot;0&quot; + i + &quot;.blv.bdl&quot;));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ffs = ff.listFiles(new FileFilter() &#123;</span><br><span class="line"></span><br><span class="line">public boolean accept(File pathname) &#123;</span><br><span class="line">for(int i = 0;i &lt; ff.list().length;i++)&#123;</span><br><span class="line">if(pathname.getName().endsWith(&quot;.blv&quot;) || pathname.getName().endsWith(&quot;.flv&quot;) || pathname.getName().endsWith(&quot;.blv.bdl&quot;))&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">//合并</span><br><span class="line">System.out.println(&quot;开始合并...&quot;);</span><br><span class="line">FlvMerge mFlvMerge = new FlvMerge();</span><br><span class="line">try &#123;</span><br><span class="line">mFlvMerge.merge(ffs, new File(episode_path + File.separator + name + &quot;.flv&quot;));</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>5.递归删除操作</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteFolder</span><span class="params">(File file)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(file.isFile() || file.listFiles().length == <span class="number">0</span>)&#123;  </span><br><span class="line">        file.delete();  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        File[] files = file.listFiles();  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;files.length;i++)&#123;  </span><br><span class="line">            deleteFolder(files[i]);  </span><br><span class="line">        &#125;  </span><br><span class="line">        file.delete();  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>6.具体怎么对FLV视频进行合并的，<a href="http://git.oschina.net/chengww5217/BiliBiliMerge/blob/master/src/com/chengww/tools/FlvMerge.java" target="_blank" rel="noopener">请点击这里</a> ，注释比较清晰。</li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Bilibili </tag>
            
            <tag> FlvMerge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓指纹+密码支付(解锁)仿支付宝Demo</title>
      <link href="/archives/Persional_Android_fingerprint_useage.html"/>
      <url>/archives/Persional_Android_fingerprint_useage.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Mar 26 2019 17:59:28 GMT+0800 (China Standard Time) --><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>Google从Android6.0（api23）就开始提供标准指纹识别支持，并对外提供指纹识别相关的接口。但是Android上的指纹识别似乎就是用来解锁手机屏幕，三方APP应用指纹的也是寥寥无几。一直想踩下安卓指纹识别的坑，直到这两天终于空出时间来尝试下android指纹识别的应用。</p><p>好吧，废话说不下去了，直接上Demo截图：</p><p><img src="https://upload-images.jianshu.io/upload_images/4971025-5980b43995a5011b.gif?imageMogr2/auto-orient/strip" alt="Screenrecorder-2017-05-14-02-50-58-795_20170514164200.gif"></p><a id="more"></a><h2 id="2-使用指纹识别"><a href="#2-使用指纹识别" class="headerlink" title="2.使用指纹识别"></a>2.使用指纹识别</h2><p>点击指纹识别button，弹出如图弹窗，弹窗使用DialogFragment。具体实现请看下面<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.使用密码解锁</span><br></pre></td></tr></table></figure><p></p><p><img src="https://upload-images.jianshu.io/upload_images/4971025-a10311fab7a862be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screenshot_2017-05-14-14-53-29-795_com.chengww.fingerdemo.png"></p><p><strong>指纹识别的使用</strong></p><p><strong>官方标准库</strong><br>Google提供的与指纹识别相关的核心类不多，主类是FingerprintManager，主类依赖三个内部类，如下图所示：<br><img src="https://upload-images.jianshu.io/upload_images/4971025-cc31192324b0d8fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>FingerprintManager主要提供三个方法如下：<br><img src="https://upload-images.jianshu.io/upload_images/4971025-8399e8c5be486f6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>FingerprintManager.AuthenticationCallback类提供的回调接口如下，重点区分红色下划线标注的部分<br><img src="https://upload-images.jianshu.io/upload_images/4971025-ca072e6cb5b6f95e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><strong>启动指纹识别接口</strong><br><img src="https://upload-images.jianshu.io/upload_images/4971025-6f885ffea4ff74ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>看了上面的介绍，如果要写代码就变得简单了</p><p><strong>1. AndroidManifest权限声明</strong><br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.USE_FINGERPRINT&quot;/&gt;</span><br></pre></td></tr></table></figure><p></p><p><strong>2. 获取FingerManager服务对象</strong><br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static FingerprintManager getFingerprintManager(Context context) &#123; </span><br><span class="line">    FingerprintManager fingerprintManager = null;</span><br><span class="line">       try &#123;</span><br><span class="line">           fingerprintManager = (FingerprintManager)context.getSystemService(Context.FINGERPRINT_SERVICE); </span><br><span class="line">      &#125; catch (Throwable e) &#123; </span><br><span class="line">            Log.e(&quot;TAG&quot;,&quot;have not class FingerprintManager&quot;);</span><br><span class="line">     &#125; </span><br><span class="line">     return fingerprintManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>3. 启动指纹识别</strong><br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mFingerprintManager.authenticate(cryptoObject, mCancellationSignal, 0, mAuthCallback, null);</span><br></pre></td></tr></table></figure><p></p><p><strong>官方v4兼容包</strong></p><p>上面介绍最标准的官方实现指纹识别的方式，当然适配肯定没这么简单，因为有很多设备兼容性要考虑，Google后续再v4包中提供了一套完整的实现，实现类与上面的一一对应的，就是改了个名字（FingerprintManager改为了FingerprintManagerCompat，机智的发现Compat是兼容的意思，所以Google在v4包中做了一些兼容性处理），做了很多兼容处理，官方推荐使用后者。v4包中类结构如下：<br><img src="https://upload-images.jianshu.io/upload_images/4971025-34339d22c283a9dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>v4包中的类使用与上面标准库中的一致，就是名字不一样而已，这里不再介绍使用方式。</p><h2 id="3-使用密码解锁"><a href="#3-使用密码解锁" class="headerlink" title="3.使用密码解锁"></a>3.使用密码解锁</h2><p>指纹识别失败达到一定次数调用密码解锁，同指纹识别弹窗一样使用DialogFragment。用这个DialogFragment有个坑，稍后再讲。</p><p><img src="https://upload-images.jianshu.io/upload_images/4971025-6a19c00235e5f3a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screenshot_2017-05-14-14-53-47-312_com.chengww.fingerdemo.png"></p><p>密码解锁弹窗样式，fragment_pwd.xml<br></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@drawable/shape_dialog"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/spacing_large"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">"@style/style_black_normal_text"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"@dimen/text_item_height"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"请输入密码"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/iv_close"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">"@drawable/selector_item_pressed"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginRight</span>=<span class="string">"@dimen/spacing_tiny"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@mipmap/icon_del"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">"@style/style_separate_line"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.chengww.fingerdemo.PwdView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/pwdView"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">"@dimen/spacing_large"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginRight</span>=<span class="string">"@dimen/spacing_large"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@color/white"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_miss_pwd"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">"@style/style_blue_normal_text"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">"@dimen/text_item_right_margin"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginEnd</span>=<span class="string">"@dimen/text_item_right_margin"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginRight</span>=<span class="string">"@dimen/text_item_right_margin"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"忘记密码?"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@drawable/selector_item_pressed"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">"end"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">"center"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.chengww.fingerdemo.InputMethodView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/inputMethodView"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><strong>密码显示圆点框</strong><br></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PwdView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; result;<span class="comment">//输入结果保存</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;<span class="comment">//密码位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;<span class="comment">//默认每一格的大小</span></span><br><span class="line">    <span class="keyword">private</span> Paint mBorderPaint;<span class="comment">//边界画笔</span></span><br><span class="line">    <span class="keyword">private</span> Paint mDotPaint;<span class="comment">//掩盖点的画笔</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBorderColor;<span class="comment">//边界颜色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDotColor;<span class="comment">//掩盖点的颜色</span></span><br><span class="line">    <span class="keyword">private</span> RectF mRoundRect;<span class="comment">//外面的圆角矩形</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRoundRadius;<span class="comment">//圆角矩形的圆角程度</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PwdView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InputCallBack inputCallBack;<span class="comment">//输入完成的回调</span></span><br><span class="line">    <span class="keyword">private</span> InputMethodView inputMethodView; <span class="comment">//输入键盘</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InputCallBack</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onInputFinish</span><span class="params">(String result)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PwdView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init(attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PwdView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init(attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化相关参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> dp = getResources().getDisplayMetrics().density;</span><br><span class="line">        <span class="keyword">this</span>.setFocusable(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFocusableInTouchMode(<span class="keyword">true</span>);</span><br><span class="line">        result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (attrs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            TypedArray ta = getContext().obtainStyledAttributes(attrs, R.styleable.PwdView);</span><br><span class="line">            mBorderColor = ta.getColor(R.styleable.PwdView_border_color, Color.LTGRAY);</span><br><span class="line">            mDotColor = ta.getColor(R.styleable.PwdView_dot_color, Color.BLACK);</span><br><span class="line">            count = ta.getInt(R.styleable.PwdView_count, <span class="number">6</span>);</span><br><span class="line">            ta.recycle();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mBorderColor = Color.LTGRAY;</span><br><span class="line">            mDotColor = Color.GRAY;</span><br><span class="line">            count = <span class="number">6</span>;<span class="comment">//默认6位密码</span></span><br><span class="line">        &#125;</span><br><span class="line">        size = (<span class="keyword">int</span>) (dp * <span class="number">30</span>);<span class="comment">//默认30dp一格</span></span><br><span class="line">        <span class="comment">//color</span></span><br><span class="line">        mBorderPaint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line">        mBorderPaint.setStrokeWidth(<span class="number">3</span>);</span><br><span class="line">        mBorderPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mBorderPaint.setColor(mBorderColor);</span><br><span class="line"></span><br><span class="line">        mDotPaint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line">        mDotPaint.setStrokeWidth(<span class="number">3</span>);</span><br><span class="line">        mDotPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">        mDotPaint.setColor(mDotColor);</span><br><span class="line">        mRoundRect = <span class="keyword">new</span> RectF();</span><br><span class="line">        mRoundRadius = (<span class="keyword">int</span>) (<span class="number">5</span> * dp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> w = measureWidth(widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> h = measureHeight(heightMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> wsize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> hsize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">        <span class="comment">//宽度没指定,但高度指定</span></span><br><span class="line">        <span class="keyword">if</span> (w == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (h != -<span class="number">1</span>) &#123;</span><br><span class="line">                w = h * count;<span class="comment">//宽度=高*数量</span></span><br><span class="line">                size = h;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//两个都不知道,默认宽高</span></span><br><span class="line">                w = size * count;</span><br><span class="line">                h = size;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//宽度已知</span></span><br><span class="line">            <span class="keyword">if</span> (h == -<span class="number">1</span>) &#123;<span class="comment">//高度不知道</span></span><br><span class="line">                h = w / count;</span><br><span class="line">                size = h;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        setMeasuredDimension(Math.min(w, wsize), Math.min(h, hsize));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">measureWidth</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//宽度</span></span><br><span class="line">        <span class="keyword">int</span> wmode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> wsize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">        <span class="keyword">if</span> (wmode == MeasureSpec.AT_MOST) &#123;<span class="comment">//wrap_content</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wsize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">measureHeight</span><span class="params">(<span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//高度</span></span><br><span class="line">        <span class="keyword">int</span> hmode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> hsize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">        <span class="keyword">if</span> (hmode == MeasureSpec.AT_MOST) &#123;<span class="comment">//wrap_content</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hsize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_DOWN) &#123;<span class="comment">//点击控件弹出输入键盘</span></span><br><span class="line">            requestFocus();</span><br><span class="line">            inputMethodView.setVisibility(VISIBLE);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFocusChanged</span><span class="params">(<span class="keyword">boolean</span> gainFocus, <span class="keyword">int</span> direction, Rect previouslyFocusedRect)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onFocusChanged(gainFocus, direction, previouslyFocusedRect);</span><br><span class="line">        <span class="keyword">if</span> (gainFocus) &#123;</span><br><span class="line">            inputMethodView.setVisibility(VISIBLE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            inputMethodView.setVisibility(GONE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> width = getWidth() - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> height = getHeight() - <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//先画个圆角矩形</span></span><br><span class="line">        mRoundRect.set(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">        canvas.drawRoundRect(mRoundRect, <span class="number">0</span>, <span class="number">0</span>, mBorderPaint);</span><br><span class="line">        <span class="comment">//画分割线</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> x = i * size;</span><br><span class="line">            canvas.drawLine(x, <span class="number">0</span>, x, height, mBorderPaint);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//画掩盖点,</span></span><br><span class="line">        <span class="comment">// 这是前面定义的变量 private ArrayList&lt;Integer&gt; result;//输入结果保存</span></span><br><span class="line">        <span class="keyword">int</span> dotRadius = size / <span class="number">8</span>;<span class="comment">//圆圈占格子的三分之一</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">float</span> x = (<span class="keyword">float</span>) (size * (i + <span class="number">0.5</span>));</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">float</span> y = size / <span class="number">2</span>;</span><br><span class="line">            canvas.drawCircle(x, y, dotRadius, mDotPaint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCheckIsTextEditor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputConnection <span class="title">onCreateInputConnection</span><span class="params">(EditorInfo outAttrs)</span> </span>&#123;</span><br><span class="line">        outAttrs.inputType = InputType.TYPE_CLASS_NUMBER;<span class="comment">//输入类型为数字</span></span><br><span class="line">        outAttrs.imeOptions = EditorInfo.IME_ACTION_DONE;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyInputConnection(<span class="keyword">this</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInputCallBack</span><span class="params">(InputCallBack inputCallBack)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.inputCallBack = inputCallBack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        result.clear();</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInputConnection</span> <span class="keyword">extends</span> <span class="title">BaseInputConnection</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyInputConnection</span><span class="params">(View targetView, <span class="keyword">boolean</span> fullEditor)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(targetView, fullEditor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">commitText</span><span class="params">(CharSequence text, <span class="keyword">int</span> newCursorPosition)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//这里是接受输入法的文本的，我们只处理数字，所以什么操作都不做</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.commitText(text, newCursorPosition);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteSurroundingText</span><span class="params">(<span class="keyword">int</span> beforeLength, <span class="keyword">int</span> afterLength)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//软键盘的删除键 DEL 无法直接监听，自己发送del事件</span></span><br><span class="line">            <span class="keyword">if</span> (beforeLength == <span class="number">1</span> &amp;&amp; afterLength == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.sendKeyEvent(<span class="keyword">new</span> KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_DEL))</span><br><span class="line">                        &amp;&amp; <span class="keyword">super</span>.sendKeyEvent(<span class="keyword">new</span> KeyEvent(KeyEvent.ACTION_UP, KeyEvent.KEYCODE_DEL));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.deleteSurroundingText(beforeLength, afterLength);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置输入键盘view</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputMethodView</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInputMethodView</span><span class="params">(InputMethodView inputMethodView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.inputMethodView = inputMethodView;</span><br><span class="line">        <span class="keyword">this</span>.inputMethodView.setInputReceiver(<span class="keyword">new</span> InputMethodView.InputReceiver() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String num)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (num.equals(<span class="string">"-1"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!result.isEmpty()) &#123;</span><br><span class="line">                        result.remove(result.size() - <span class="number">1</span>);</span><br><span class="line">                        invalidate();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (result.size() &lt; count) &#123;</span><br><span class="line">                        result.add(num);</span><br><span class="line">                        invalidate();</span><br><span class="line">                        ensureFinishInput();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否输入完成，输入完成后调用callback</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ensureFinishInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result.size() == count &amp;&amp; inputCallBack != <span class="keyword">null</span>) &#123;<span class="comment">//输入完成</span></span><br><span class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            <span class="keyword">for</span> (String i : result) &#123;</span><br><span class="line">                sb.append(i);</span><br><span class="line">            &#125;</span><br><span class="line">            inputCallBack.onInputFinish(sb.toString());</span><br><span class="line">            clearResult();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取输入文字</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInputText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result.size() == count) &#123;</span><br><span class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            <span class="keyword">for</span> (String i : result) &#123;</span><br><span class="line">                sb.append(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>下方输入键盘</strong><br></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputMethodView</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InputReceiver inputReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InputMethodView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        LayoutInflater.from(context).inflate(R.layout.view_password_input, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        findViewById(R.id.btn_1).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btn_2).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btn_3).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btn_4).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btn_5).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btn_6).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btn_7).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btn_8).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btn_9).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btn_0).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btn_del).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.layout_hide).setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                setVisibility(GONE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        String num = (String) v.getTag();</span><br><span class="line">        <span class="keyword">this</span>.inputReceiver.receive(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置接收器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> receiver</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInputReceiver</span><span class="params">(InputReceiver receiver)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.inputReceiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输入接收器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InputReceiver</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">receive</span><span class="params">(String num)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>MainActivity实现输入回调就可以得到回调结果了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">PwdView</span>.<span class="title">InputCallBack</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInputFinish</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result.equals(<span class="string">"123456"</span>)) &#123;</span><br><span class="line">            fragment.dismiss();</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"验证成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            showPwdError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今天暂时写这么多吧，整个项目还有点BUG，标题说仿支付宝也仿的不像，改天把后半部分整理出来修改下再发个完整版的。<br>源代码下载：<br><a href="http://git.oschina.net/chengww5217/fingerdemo" target="_blank" rel="noopener">http://git.oschina.net/chengww5217/fingerdemo</a><br>指纹解锁部分参考引用了以下文章，原作者指纹识别部分写的非常棒，强烈建议前往拜读：<br><a href="http://www.cnblogs.com/popfisher/p/6063835.html" target="_blank" rel="noopener">http://www.cnblogs.com/popfisher/p/6063835.html</a><br><a href="https://willowtreeapps.com/ideas/android-fingerprint-apis-an-overview-for-android-app-developers/" target="_blank" rel="noopener">https://willowtreeapps.com/ideas/android-fingerprint-apis-an-overview-for-android-app-developers/</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> FingerManager </tag>
            
            <tag> 指纹识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio上传代码到码云(Oschina)教程</title>
      <link href="/archives/Android_studio_push_to_oschina.html"/>
      <url>/archives/Android_studio_push_to_oschina.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Mar 26 2019 17:59:28 GMT+0800 (China Standard Time) --><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><img src="https://gitee.com/download_gitee_logo?path=logo_gitee_light_cn_with_domain_name.png" alt="码云"></p><p>git 代码仓库一般是用的 github。但由于国内的情况，不进行科学上网的话那个速度简直是龟速。再加上公司那个 10M 的小水管实在是带不动，以及付费创建私有项目等，只好转战国内的代码托管站点。</p><p>我一直使用的都是 oschina，但是有个问题。Android studio 的 VCS 工具一直上传不了代码，总是被拒绝。今天终于搞清楚了是怎么回事，教程请往下看。</p><a id="more"></a><h4 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h4><p>1.首先前往码云<a href="https://git.oschina.net/" target="_blank" rel="noopener">注册账号</a>，没什么好说的，全中文的。<br>2.码云右上方加号，创建项目</p><p><img src="https://upload-images.jianshu.io/upload_images/4971025-c1f71b7b7b27c4de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建项目"></p><p>这个默认使用Readme初始化项目。如果你不使用任何文件初始化你的项目，即不勾选下图所有的复选框，那么就不会有冲突问题了。也就是和上传到GitHub一样，完全不会被拒绝。</p><p><img src="https://upload-images.jianshu.io/upload_images/4971025-e9792c8b140c15fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>以下教程以使用 Readme 初始化项目为例，教大家如何将项目上传到码云，也同样适用于解决分支冲突的问题。</p><p>3.完成后，和上传到 github 步骤一样</p><ul><li>打开 Android Studio–VCS–Enable Version Control Integration…</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4971025-c7e86f5a523f339a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="VCS"></p><ul><li>下拉选择 git</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4971025-8b25db2a5d493ea7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>然后仓库就创建好了，此时左方文件应显示为红色</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4971025-082646096a1f177d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>然后 VCS–git–add 代码添加到 git 仓库</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4971025-b1e4cd31c1526b43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>有提示是否将 vcs.xml （版本控制的配置文件） 也一并加入到仓库，这个随意。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4971025-70c7f344eede35fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>右上 commit changes</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4971025-2de2179aa30322a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>commit and push 或者 commit 然后再 push 也是一样</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4971025-413524cd7060f0ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>项目界面复制仓库地址，填写仓库地址，填写 oschina 用户名密码。第一次需要设定一个密码，以后无需登录，直接输入密码即可。然后 push 等待被拒绝</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4971025-a2eaf0d562b6238a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="仓库地址"><br><img src="https://upload-images.jianshu.io/upload_images/4971025-1bb0bf637681f15f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/4971025-a3648b05b8e851d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="等待被拒绝提示"></p><ul><li>VCS–git–pull（看清楚不是 push）拉取 Readme.md<br>进行拉取 Readme.md 操作前，一定要把本地 git 仓库未 commit 的文件 commit。因进行 VCS 操作后，android studio 会自动添加 vcs.xml 等文件到 git。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4971025-cde912b2d46aa55a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>刷新按钮，刷新出 master 勾选–pull</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4971025-f0d748af2c5bfdc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>如果出现提示 <code>fatal: refusing to merge unrelated histories</code> 不能合并不同的仓库的提示，请前往你项目的文件夹，右键 Git Base here.<br>输入 <code>git pull origin master --allow-unrelated-histories</code> 回车，等待合并拉取到Readme.md，关闭窗口。</p><ul><li>下方 VersionControl 可以看到 readme.md 已经被拉取</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/4971025-d3763b7fc0f0b032.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>再次push就可以了</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/4971025-91190e4f0fcfda34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>刷新oschina仓库地址，大功告成</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/4971025-67973572f7ad2d54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> oschina </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闪烁加载视图---ShimmerRecyclerView</title>
      <link href="/archives/ShimmerRecyclerView.html"/>
      <url>/archives/ShimmerRecyclerView.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Mar 26 2019 17:59:28 GMT+0800 (China Standard Time) --><p>今天看到一个和支付宝加载RecyclerView显示加载中动画类似的库，感觉很有意思，参照官网说明写一个粗浅的使用说明给大家分享下。<br>具体的显示效果如下：</p><table><thead><tr><th>List Demo</th><th>Grid Demo</th></tr></thead><tbody><tr><td><img src="https://upload-images.jianshu.io/upload_images/4971025-ddfdb1e0bfe05002.gif?imageMogr2/auto-orient/strip" alt=""></td><td><img src="https://upload-images.jianshu.io/upload_images/4971025-4d1c7c3c0bcc5ce6.gif?imageMogr2/auto-orient/strip" alt=""></td></tr></tbody></table><a id="more"></a><h5 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h5><h6 id="ShimmerRecyclerView"><a href="#ShimmerRecyclerView" class="headerlink" title="ShimmerRecyclerView"></a>ShimmerRecyclerView</h6><p>一个自定义循环视图，带有shimmer视图，用来表现视图正在加载中。这个循环视图有一个内置的适配器来控制shimmer性能并提供两个方法：</p><ul><li>showShimmerAdapter() - 设置一个demo(加载中)适配器，显示预设子demo视图的数量。</li><li>hideShimmerAdapter() -隐藏加载中视图，恢复适配器以显示实际的子元素.</li></ul><h6 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h6><p>按如下属性和方法初始化demo视图.</p><table><thead><tr><th style="text-align:center">XML 属性</th><th style="text-align:center">Java 方法</th><th style="text-align:center">Explanation</th></tr></thead><tbody><tr><td style="text-align:center">app:demo_child_count</td><td style="text-align:center">setDemoChildCount(int)</td><td style="text-align:center">在shimmer适配器中展现设置demo视图的数量(Integer)。</td></tr><tr><td style="text-align:center">app:demo_layout</td><td style="text-align:center">setDemoLayoutReference(int)</td><td style="text-align:center">定义my_demo_view.xml ,请参考布局[1]。</td></tr><tr><td style="text-align:center">app:demo_layout_manager_type</td><td style="text-align:center">setDemoLayoutManager(LayoutManagerType)</td><td style="text-align:center">演示视图布局管理。</td></tr></tbody></table><p>[1] 一个显示List Demo的 my_demo_view.xml（加载中） 的例子：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">              android:layout_width=&quot;match_parent&quot;</span><br><span class="line">              android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">              android:layout_marginBottom=&quot;4dp&quot;</span><br><span class="line">              android:layout_marginLeft=&quot;16dp&quot;</span><br><span class="line">              android:layout_marginRight=&quot;16dp&quot;</span><br><span class="line">              android:layout_marginTop=&quot;4dp&quot;</span><br><span class="line">              android:background=&quot;@drawable/bg_card&quot;</span><br><span class="line">              android:orientation=&quot;vertical&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginTop=&quot;16dp&quot;</span><br><span class="line">        android:background=&quot;@android:color/white&quot;</span><br><span class="line">        android:orientation=&quot;horizontal&quot;</span><br><span class="line">        android:paddingLeft=&quot;8dp&quot;</span><br><span class="line">        android:paddingRight=&quot;8dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_height=&quot;78dp&quot;</span><br><span class="line">            android:layout_weight=&quot;1&quot;</span><br><span class="line">            android:orientation=&quot;vertical&quot;</span><br><span class="line">            android:paddingLeft=&quot;8dp&quot; &gt;</span><br><span class="line"></span><br><span class="line">            &lt;View</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;6dp&quot;</span><br><span class="line">                android:layout_marginBottom=&quot;3dp&quot;</span><br><span class="line">                android:alpha=&quot;0.1&quot;</span><br><span class="line">                android:background=&quot;@android:color/background_dark&quot;  /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;View</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;6dp&quot;</span><br><span class="line">                android:layout_marginBottom=&quot;3dp&quot;</span><br><span class="line">                android:layout_marginTop=&quot;3dp&quot;</span><br><span class="line">                android:alpha=&quot;0.1&quot;</span><br><span class="line">                android:background=&quot;@android:color/background_dark&quot;  /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;View</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;6dp&quot;</span><br><span class="line">                android:layout_marginBottom=&quot;3dp&quot;</span><br><span class="line">                android:layout_marginTop=&quot;3dp&quot;</span><br><span class="line">                android:alpha=&quot;0.1&quot;</span><br><span class="line">                android:background=&quot;@android:color/background_dark&quot;  /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;View</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;6dp&quot;</span><br><span class="line">                android:layout_marginBottom=&quot;3dp&quot;</span><br><span class="line">                android:layout_marginTop=&quot;3dp&quot;</span><br><span class="line">                android:alpha=&quot;0.1&quot;</span><br><span class="line">                android:background=&quot;@android:color/background_dark&quot; /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;View</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;6dp&quot;</span><br><span class="line">                android:layout_marginBottom=&quot;3dp&quot;</span><br><span class="line">                android:layout_marginTop=&quot;3dp&quot;</span><br><span class="line">                android:alpha=&quot;0.1&quot;</span><br><span class="line">                android:background=&quot;@android:color/background_dark&quot; /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;View</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;6dp&quot;</span><br><span class="line">                android:layout_marginBottom=&quot;3dp&quot;</span><br><span class="line">                android:layout_marginTop=&quot;3dp&quot;</span><br><span class="line">                android:alpha=&quot;0.1&quot;</span><br><span class="line">                android:background=&quot;@android:color/background_dark&quot; /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;View</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;6dp&quot;</span><br><span class="line">                android:layout_marginTop=&quot;3dp&quot;</span><br><span class="line">                android:alpha=&quot;0.1&quot;</span><br><span class="line">                android:background=&quot;@android:color/background_dark&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">        &lt;View</span><br><span class="line">            android:layout_width=&quot;78dp&quot;</span><br><span class="line">            android:layout_height=&quot;78dp&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;8dp&quot;</span><br><span class="line">            android:layout_marginRight=&quot;8dp&quot;</span><br><span class="line">            android:alpha=&quot;0.1&quot;</span><br><span class="line">            android:background=&quot;@android:color/background_dark&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginBottom=&quot;16dp&quot;</span><br><span class="line">        android:layout_marginLeft=&quot;16dp&quot;</span><br><span class="line">        android:layout_marginRight=&quot;16dp&quot;</span><br><span class="line">        android:orientation=&quot;vertical&quot; &gt;</span><br><span class="line"></span><br><span class="line">        &lt;View</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;6dp&quot;</span><br><span class="line">            android:layout_marginBottom=&quot;3dp&quot;</span><br><span class="line">            android:layout_marginTop=&quot;6dp&quot;</span><br><span class="line">            android:alpha=&quot;0.1&quot;</span><br><span class="line">            android:background=&quot;@android:color/background_dark&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;View</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;6dp&quot;</span><br><span class="line">            android:layout_marginBottom=&quot;3dp&quot;</span><br><span class="line">            android:layout_marginTop=&quot;3dp&quot;</span><br><span class="line">            android:alpha=&quot;0.1&quot;</span><br><span class="line">            android:background=&quot;@android:color/background_dark&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;View</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;6dp&quot;</span><br><span class="line">            android:layout_marginBottom=&quot;3dp&quot;</span><br><span class="line">            android:layout_marginTop=&quot;3dp&quot;</span><br><span class="line">            android:alpha=&quot;0.1&quot;</span><br><span class="line">            android:background=&quot;@android:color/background_dark&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><p></p><p>[1.1] @drawable/bg_card:<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">    &lt;corners android:radius=&quot;3dp&quot; /&gt;</span><br><span class="line">    &lt;solid android:color=&quot;@android:color/white&quot; /&gt;</span><br><span class="line">    &lt;stroke</span><br><span class="line">        android:width=&quot;1dp&quot;</span><br><span class="line">        android:color=&quot;#d6d6d6&quot; /&gt;</span><br><span class="line">&lt;/shape&gt;</span><br></pre></td></tr></table></figure><p></p><h6 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h6><p>1.将本库添加到你的项目中<br>在你的项目级build.gradle文件中添加下列设置：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">...</span><br><span class="line">maven &#123; url &apos;https://jitpack.io&apos; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>module下build.gradle文件中添加依赖：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  compile &apos;com.github.sharish:ShimmerRecyclerView:v1.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>2.定义你的xml:<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;com.cooltechworks.views.shimmer.ShimmerRecyclerView</span><br><span class="line">xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">android:id=&quot;@+id/shimmer_recycler_view&quot;</span><br><span class="line">android:layout_width=&quot;match_parent&quot;</span><br><span class="line">android:layout_height=&quot;match_parent&quot;</span><br><span class="line">app:demo_child_count=&quot;10&quot;</span><br><span class="line">app:demo_grid_child_count=&quot;2&quot;</span><br><span class="line">app:demo_layout=&quot;@layout/layout_demo_grid&quot;</span><br><span class="line">app:demo_layout_manager_type=&quot;grid&quot; /&gt;</span><br></pre></td></tr></table></figure><p></p><p>@layout/layout_demo_grid指在加载spinner时展现的示例布局(参考[1])。<br>3.在你的Activity onCreate()方法中，初始化shimmer如下：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ShimmerRecyclerView shimmerRecycler = (ShimmerRecyclerView) findViewById(R.id.shimmer_recycler_view);</span><br><span class="line">shimmerRecycler.setLayoutManager(layoutManager);</span><br><span class="line">shimmerRecycler.setAdapter(mAdapter);</span><br><span class="line">//显示加载中</span><br><span class="line">shimmerRecycler.showShimmerAdapter();</span><br></pre></td></tr></table></figure><p></p><p>4.耗时操作后显示真正要显示的内容，然后隐藏加载中：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shimmerRecycler.hideShimmerAdapter();</span><br></pre></td></tr></table></figure><p></p><p>其余操作和RecyclerView一样，要完成上拉加载下拉刷新，点击事件等同RecyclerView可以在Adapter中完成。</p><p>项目官网地址：<a href="https://github.com/sharish/ShimmerRecyclerView" target="_blank" rel="noopener">https://github.com/sharish/ShimmerRecyclerView</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ShimmerRecyclerView </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
